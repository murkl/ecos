#!/bin/bash
SCRIPT_VERSION=2.1.2

#/////////////////////////////////////////////////////
# SCRIPT VARIABLES
#/////////////////////////////////////////////////////

SCRIPT_ID="ecos"
SCRIPT_TITLE="ECOS"
SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_TUI_FILE="$SCRIPT_DIR/.$SCRIPT_ID.tui"
SCRIPT_TUI_WIDTH=68
SCRIPT_TUI_HEIGHT=24

#/////////////////////////////////////////////////////
# COLORS
#/////////////////////////////////////////////////////

COLOR_RED='\033[0;31m'
COLOR_NULL='\033[0m' # No Color

#/////////////////////////////////////////////////////
# RELEASE
#/////////////////////////////////////////////////////

# DEVELOP
DEVELOP_SCRIPT="$SCRIPT_DIR/ecos"
DEVELOP_CHANGELOG="$SCRIPT_DIR/assets/changelog.html"

# RELEASE FILE
RELEASE_SCRIPT="$SCRIPT_DIR/release/ecos"
RELEASE_CHANGELOG="$SCRIPT_DIR/release/changelog.html"

#/////////////////////////////////////////////////////
# ECOS VARIABLES
#/////////////////////////////////////////////////////

# URLS
ECOS_REPO_URL="https://github.com/murkl/ecos.git"
ECOS_DOTS_DEFAULT_URL="https://github.com/murkl/dotfiles-gnome.git"
ECOS_RAW_URL="https://raw.githubusercontent.com/murkl/ecos/main"
ECOS_CORE_RELEASE_URL="$ECOS_RAW_URL/release/ecos"

# ARCH ISO
ECOS_ARCH_ISO_ROOT_URL="https://www.archlinux.de/download/iso/$(date "+%Y.%m.01")"
ECOS_ARCH_ISO_FILE="archlinux-$(date "+%Y.%m.01")-x86_64.iso"
ECOS_ARCH_ISO_SHA1="sha1sums.txt"

# ECOS
ECOS_HOME="$HOME/.ecos"
ECOS_CONFIG_DIR="$ECOS_HOME/config"
ECOS_CONFIG_FILE="$ECOS_CONFIG_DIR/ecos.conf"
ECOS_BIN_DIR="$ECOS_HOME/bin"
ECOS_CORE="$ECOS_BIN_DIR/$SCRIPT_ID"
ECOS_INIT_SCRIPT="$ECOS_HOME/init"
ECOS_WORKING_DIR="$ECOS_HOME/.cache"
ECOS_DOTFILES="$ECOS_WORKING_DIR/dotfiles"
ECOS_STATE_DIR="$ECOS_WORKING_DIR/state"
ECOS_STATE_INITIALIZED="$ECOS_STATE_DIR/ecos_initialized"
ECOS_STATE_SHOW_CHANGELOG="$ECOS_STATE_DIR/ecos_show_changelog"
ECOS_REPO="$ECOS_WORKING_DIR/repo"
ECOS_ICON_FILE="$ECOS_REPO/assets/ecos.svg"
ECOS_CHANGELOG_FILE="$ECOS_REPO/assets/changelog.html"
ECOS_CACHE_TWEAKS="$ECOS_WORKING_DIR/tweaks"
ECOS_USER_TWEAKS_DIR="$ECOS_HOME/tweaks"
ECOS_DESKTOP_FILE="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
ECOS_REMOTE_VERSION=''

# DEFAULT PROPERTIES
TERMINAL_EXEC='gnome-terminal -e'

#/////////////////////////////////////////////////////
# CORE VARIABLES
#/////////////////////////////////////////////////////

CORE_CONFIG_FILE="$SCRIPT_DIR/$SCRIPT_ID.conf"
CORE_LOG_FILE="$SCRIPT_DIR/$SCRIPT_ID.log"

# DEFAULT CORE CONFIG VALUES
USERNAME=''
HOSTNAME=''
WORKSTATION=''
SWAP_SIZE='0'
DISK=''
BOOT_PARTITION=''
ROOT_PARTITION=''
UCODE=''
LOCALE_LANG=''
LOCALE_GEN=('')
TIMEZONE=''
VCONSOLE_KEYMAP=''
X11_KEYBOARD_LAYOUT=''
X11_KEYBOARD_VARIANT=''
CUSTOM_PACKAGES=''

#/////////////////////////////////////////////////////
# CORE LANGUAGES
#/////////////////////////////////////////////////////

set_lang_en_US() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='en_US.UTF-8'
    LOCALE_GEN=('en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='en-latin1-nodeadkeys'
    X11_KEYBOARD_LAYOUT='en'
    X11_KEYBOARD_VARIANT='nodeadkeys'
}

set_lang_de_DE() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='de_DE.UTF-8'
    LOCALE_GEN=('de_DE.UTF-8 UTF-8' 'de_DE ISO-8859-1' 'de_DE@euro ISO-8859-15' 'en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='de-latin1-nodeadkeys'
    X11_KEYBOARD_LAYOUT='de'
    X11_KEYBOARD_VARIANT='nodeadkeys'
}

#/////////////////////////////////////////////////////
# MAIN
#/////////////////////////////////////////////////////

main() {

    #----------------------------------------
    # CHROOT MODE
    #----------------------------------------
    if [ "$1" = "--chroot-install" ] && [ "$2" != "" ] && [ "$3" != "" ]; then
        core_install_chroot "$2" "$3"
        exit $?
    fi

    # ---------------------------------------
    # VERSION
    # ---------------------------------------
    if [ "$1" = "--version" ]; then
        echo -e "$SCRIPT_VERSION"
        exit 0
    fi

    # ---------------------------------------
    # DEV: CORE RELEASE
    # ---------------------------------------
    if [ "$1" = "--core-release" ]; then
        ecos_core_release
        exit 0
    fi

    # ---------------------------------------
    # CORE INSTALL
    # ---------------------------------------
    if [ "$1" = "--core-install" ]; then
        tui_menu_install_core
        exit 0
    fi

    # ---------------------------------------
    # ECOS INSTALL
    # ---------------------------------------
    if [ "$1" = "--ecos-install" ]; then
        if [ ! -f "$ECOS_STATE_INITIALIZED" ]; then
            tui_menu_install_ecos
        else
            exit 0
        fi
    fi

    # ---------------------------------------
    # CORE UPDATE
    # ---------------------------------------
    if [ "$1" = "--core-update" ]; then
        ecos_update_core
        exit 0
    fi

    # ---------------------------------------
    # ECOS UPDATE
    # ---------------------------------------
    if [ "$1" = "--ecos-update" ]; then
        ecos_update_system
        exit 0
    fi

    # ---------------------------------------
    # ECOS AUTOSTART
    # ---------------------------------------
    if [ "$1" = "--autostart" ]; then
        if [ -f "$ECOS_STATE_SHOW_CHANGELOG" ]; then
            zenity_show_changelog
        fi
        exit 0
    fi

    # ---------------------------------------
    # ECOS TWEAKS
    # ---------------------------------------
    if [ "$1" = "--ecos-tweaks" ]; then
        ecos_tui_menu_tweaks '--no-update'
        exit 0
    fi

    # ---------------------------------------
    # EXECUTE TWEAK
    # ---------------------------------------
    if [ "$1" = "--tweak" ]; then
        ecos_exec_tweak "$2" "$3"
        exit 0
    fi

    # ---------------------------------------
    # ECOS CHANGELOG
    # ---------------------------------------
    if [ "$1" = "--changelog" ]; then
        zenity_show_changelog
        exit 0
    fi

    # ---------------------------------------
    # ECOS MANAGER
    # ---------------------------------------
    if [ "$1" = "--manager" ]; then
        zenity_manager
        exit 0
    fi

    #----------------------------------------
    # CORE TUI | MANAGER TUI
    #----------------------------------------
    if [ "$1" = "" ]; then
        # Check if started from live iso
        if [ "$(cat /proc/sys/kernel/hostname)" = "archiso" ]; then
            tui_menu_install_core
        else
            if [ ! -f "$ECOS_STATE_INITIALIZED" ]; then
                tui_menu_install_ecos
                exit $?
            else
                tui_menu_manager
                exit $?
            fi
        fi
    fi
}

#/////////////////////////////////////////////////////
# ZENITY
#/////////////////////////////////////////////////////

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=350 --height=250 --title='' --text='' --window-icon="$ECOS_ICON_FILE" "$@" 2>/dev/null
}

notify() {
    zenity --notification --text="$SCRIPT_TITLE\n$1"
}

#/////////////////////////////////////////////////////
# ZENITY MENUS
#/////////////////////////////////////////////////////

print_zenity_header() {
    local title="$1"
    local version_remote="$2"
    local header='<span font_family="monospace" foreground="#A3BE8C" font="24"><b>'$SCRIPT_TITLE'</b></span>'
    local version='<span font_family="monospace" foreground="#494949" font="10">'$SCRIPT_VERSION'</span>'
    if [ "$version_remote" != "" ] && [ "$SCRIPT_VERSION" != "$version_remote" ]; then
        local version='<span font_family="monospace" foreground="#494949" font="10">'$SCRIPT_VERSION' (Update '$version_remote' available)</span>'
    fi
    local title='<span font_family="monospace" foreground="#494949" font="10"><b>'$title'</b></span>'
    echo -e " $header\n  $version\n\n $title"
}

zenity_manager() {
    ecos_check_zenity
    ecos_init_ecos
    local ecos_update="/tmp/ecos.update"
    local pid_file="/tmp/ecos.pids"

    echo "ECOS_REMOTE_VERSION=$ECOS_REMOTE_VERSION"
    if [ "$ECOS_REMOTE_VERSION" = '' ]; then

        (
            # DOWNLOAD CORE
            if ! curl -s -L "$ECOS_CORE_RELEASE_URL" >"$ecos_update"; then
                echo "ERROR: ECOS CORE UPDATE DOWNLOAD: $ECOS_CORE_RELEASE_URL"
                exit 1
            fi
            if ! chmod +x "$ecos_update"; then
                echo "ERROR: CHMOD CORE UPDATE: $ecos_update"
                exit 1
            fi

            # UPDATE REPO
            ecos_update_repo

            echo "SUCCESS" >"$pid_file"

        ) &
        local task_pid="$!"

        # Capture pid and show progress dialog
        echo "$task_pid" >"$pid_file"
        local txt_title='<span font_family="monospace" foreground="#494949" font="12"><b>Initialize '$SCRIPT_TITLE' CORE...</b></span>'
        tail -f /dev/null --pid $task_pid | (zenity --progress --width=300 --height=150 --no-cancel --text="\n\t$txt_title\n" --pulsate --auto-close || (kill_pid "$task_pid" && echo "CANCELED" >"$pid_file"))

        # Finish
        local pid_state=$(<"$pid_file")
        if [ "$pid_state" = "SUCCESS" ]; then
            ECOS_REMOTE_VERSION=$($ecos_update --version)
        fi

        if [ "$pid_state" = "CANCELED" ]; then
            ECOS_REMOTE_VERSION=''
        fi
    fi

    local menu_entries=()
    menu_entries+=("Update")
    menu_entries+=("Tweaks")
    menu_entries+=("Settings")
    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header 'Manager' $ECOS_REMOTE_VERSION)" --cancel-label='Exit' --ok-label='Ok' "${menu_entries[@]}")"; then
        exit 0
    fi

    if [ "$zenity_result" = "Update" ]; then
        gnome-terminal -e 'bash -c "'$ECOS_CORE' --ecos-update"'
        exit 0
    fi
    if [ "$zenity_result" = "Tweaks" ]; then
        ecos_update_repo
        gnome-terminal -e 'bash -c "'$ECOS_CORE' --ecos-tweaks"'
        exit 0
    fi
    if [ "$zenity_result" = "Settings" ]; then
        zenity_settings
        zenity_manager
        exit 0
    fi
}

zenity_settings() {
    ecos_check_zenity
    mkdir -p "$ECOS_CONFIG_DIR"
    touch "$ECOS_CONFIG_FILE"
    if zenity_result=$(zenity --text-info --width=550 --height=300 --title="Settings" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$ECOS_CONFIG_FILE"); then
        echo "$zenity_result" >"$ECOS_CONFIG_FILE"
        notify "Settings saved"
    fi

}

zenity_show_changelog() {
    ecos_check_zenity
    zenity --text-info --width=500 --height=500 --title="$SCRIPT_TITLE" --cancel-label="Close" --ok-label="Ok" --font="monospace" --html --no-interaction --filename="$ECOS_CHANGELOG_FILE"
    rm -f "$ECOS_STATE_SHOW_CHANGELOG"
}

#/////////////////////////////////////////////////////
# KILL PID
#/////////////////////////////////////////////////////

kill_pid() {
    local pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    local pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done
}

#/////////////////////////////////////////////////////
# ECOS RELEASE
#/////////////////////////////////////////////////////

ecos_core_release() {

    local show_warning="false"
    local develop_version="$($DEVELOP_SCRIPT --version)"
    local release_version="$($RELEASE_SCRIPT --version)"

    echo -e ''
    echo -e "////////////////////////"
    echo -e "> RELEASE NEW ECOS CORE"
    echo -e "////////////////////////"
    echo -e "VERSION DEVELOP:  $develop_version"
    echo -e "VERSION RELEASE:  $release_version"
    echo -e ''

    # Check different version numbers
    if [ "$develop_version" = "$release_version" ]; then
        show_warning="true"
        printf "${COLOR_RED}!! SAME VERSION NUMBERS !!${COLOR_NULL}\n"
    fi

    # Check different changelog files
    local diff_result=$(diff "$DEVELOP_CHANGELOG" "$RELEASE_CHANGELOG")
    if [ "$diff_result" = "" ]; then
        show_warning="true"
        printf "${COLOR_RED}!! NO CHANGELOG UPDATE !!${COLOR_NULL}\n"
    fi

    # Show warning
    if [ "$show_warning" = "true" ]; then
        echo -e ''
        read -p "CONTINUE ANYWAY? [y/n]: " user_input
        if [ "$user_input" != "y" ]; then
            echo -e "Skipped..."
            exit 0
        fi
    fi

    # DEPLOYMENT
    echo -e ''
    read -p "DEPLOY ECOS $develop_version? [yes/no]: " user_input
    if [ "$user_input" = "yes" ]; then

        # Copy dev changelog to release
        if ! cp -f "$DEVELOP_CHANGELOG" "$RELEASE_CHANGELOG"; then
            echo -e "ERROR: cp -f "$DEVELOP_CHANGELOG" "$RELEASE_CHANGELOG""
            exit 1
        fi

        # Copy dev core to release
        if ! cp -f "$DEVELOP_SCRIPT" "$RELEASE_SCRIPT"; then
            echo -e "ERROR: cp -f "$DEVELOP_SCRIPT" "$RELEASE_SCRIPT""
            exit 1
        fi

        # Git commit
        cd "$SCRIPT_DIR" || exit 1
        local commit_msg="ECOS RELEASE $(./release/ecos --version)"
        git add "./release/ecos" && git add "./release/changelog.html" && git commit -m "$commit_msg"
        echo -e "ECOS CORE succefully released!"
    else
        echo -e "Skipped..."
    fi
}

#/////////////////////////////////////////////////////
# TUI MENUS
#/////////////////////////////////////////////////////

tui_menu_install_core() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 24 "CORE INSTALLER"
    if ! menu_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3 "1" "Install ECOS Core" "2" "    Recovery" "3" "      Logs" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Install core
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then
        check_internet
        core_tui_install
        exit $?
    fi

    #----------------------------------------
    # Recovery
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        tui_open_recovery
        exit 0
    fi

    #----------------------------------------
    # Logs
    #----------------------------------------
    if [ "$menu_input" = "3" ]; then
        core_tui_show_logs
        tui_menu_install_core
        exit 0
    fi
}

tui_menu_install_ecos() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 24 "ECOS INSTALLER"
    if ! menu_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 4 "1" "  Install ECOS" "2" " Install Manual" "3" "Change Password" "4" "Create USB Stick" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Install ECOS
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then
        ecos_tui_install_ecos
        exit 0
    fi

    #----------------------------------------
    # Manual Install
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        clear
        echo -e "\nSimply type 'ecos' to open again\n\nInstall your System manually..."
        exit 0
    fi

    #----------------------------------------
    # Change Password
    #----------------------------------------
    if [ "$menu_input" = "3" ]; then
        clear
        passwd
        read -p "Press <ENTER> to continue..."
        tui_menu_install_ecos
        exit 0
    fi

    #----------------------------------------
    # Create USB Stick
    #----------------------------------------
    if [ "$menu_input" = "4" ]; then
        clear
        tui_create_usb
        exit 0
    fi

}

tui_menu_manager() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 28 "MANAGER"
    if ! menu_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 4 "1" "   Update ECOS" "2" "  Tweak Manager" "3" "   Reset ECOS" "4" "Create USB Stick" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Update ECOS
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then
        ecos_update_system
        exit 0
    fi

    #----------------------------------------
    # Tweaks
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        ecos_tui_menu_tweaks
        exit 0
    fi

    #----------------------------------------
    # Init ECOS
    #----------------------------------------
    if [ "$menu_input" = "3" ]; then
        ecos_tui_install_ecos
        exit 0
    fi

    #----------------------------------------
    # Create USB Stick
    #----------------------------------------
    if [ "$menu_input" = "4" ]; then
        tui_create_usb
        exit 0
    fi
}

#/////////////////////////////////////////////////////
# CORE INSTALLATION
#/////////////////////////////////////////////////////

core_tui_install() {

    #----------------------------------------
    # Ask for reset core config
    #----------------------------------------
    if [ -f "$CORE_CONFIG_FILE" ]; then
        tui_init 15 "Continue Setup Configuration?\n"
        if ! (whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" 0 "$SCRIPT_TUI_WIDTH"); then
            core_reset_config
        fi
    fi

    #----------------------------------------
    # Check config
    #----------------------------------------
    core_tui_check_config

    #----------------------------------------
    # Encryption password
    #----------------------------------------
    tui_init 0 "Enter Encryption Password"
    if ! password_encryption=$(whiptail --passwordbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    # Confirm password
    tui_init 0 "Confirm Encryption Password"
    if ! password_input_confirm=$(whiptail --passwordbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    # Check password
    if [ "$password_encryption" != "$password_input_confirm" ]; then
        tui_init 0 "Password Mismatch! Restart the Installation..."
        whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"
        exit 1
    fi

    #----------------------------------------
    # Confirm and execute install
    #----------------------------------------
    tui_init 0 "Start Installation"
    tui_add 0 "!!! ALL YOUR DATA WILL BE LOST !!!"
    tui_add 0 "Continue?"
    if (! whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"); then
        exit 0
    fi

    #----------------------------------------
    # Execute install (will execute chroot)
    #----------------------------------------
    tui_init 0 "Core Installation..."
    core_exec_install "$password_encryption" | whiptail --gauge "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 0 3>&1 1>&2 2>&3

    # Show Result
    if [ $? = 1 ]; then
        # Error message
        tui_init 0 "ERROR: INSTALLATION FAILED!"
        whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"

        # Logs
        core_tui_show_logs

        exit 1
    else
        # Success message
        tui_init 0 "INSTALLATION SUCCESSFULLY FINISHED"
        whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"

        # Logs
        core_tui_show_logs

        # Reboot
        tui_init 0 "Reboot now?"
        if (whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"); then
            reboot
        fi

        exit 0
    fi

}

core_exec_install() {

    local password_encryption="$1"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$CORE_CONFIG_FILE"

    core_log "!!! INSTALLATION START !!!"

    #----------------------------------------
    # Check UEFI boot
    #----------------------------------------
    local uefi_mode=true
    if efivar -l >/dev/null; then
        core_log "UEFI detected"
    else
        core_log "BIOS detected"
        uefi_mode=false
    fi

    #----------------------------------------
    # Wipe disk
    #----------------------------------------
    core_gauge_update 4 "Wipe $DISK"
    core_exec_command_wrap sgdisk -Z "$DISK"

    #----------------------------------------
    # Partition disk
    #----------------------------------------
    core_gauge_update 8 "Partition $DISK"

    # Create new partition table
    core_exec_command_wrap sgdisk -o "$DISK"

    # Reload partition table
    core_exec_command_wrap partprobe "$DISK"

    if [ "$uefi_mode" = "true" ]; then

        # /boot partition: 512MiB
        core_exec_command_wrap sgdisk -n 0:0:+512MiB -t 0:ef00 -c 0:boot "$DISK"

        # / partition: Rest of space
        core_exec_command_wrap sgdisk -n 0:0:0 -t 0:8300 -c 1:root "$DISK"

    else

        # BIOS only: 1MiB partition is needed for GRUB (if GPT is used instead of MBR)
        core_exec_command_wrap sgdisk -n 0:0:+1MiB -t 0:ef02 "$DISK"

        # / partition: Rest of space
        core_exec_command_wrap sgdisk -n 0:0:0 -t 0:8300 -c 0:root "$DISK"
    fi

    #----------------------------------------
    # Encrypt disk
    #----------------------------------------
    core_gauge_update 10 "Encrypt $DISK"

    # Set encrypt command
    local crypt_cmd=''
    if [ "$uefi_mode" = "true" ]; then
        crypt_cmd="cryptsetup -c aes-xts-plain -s 512 luksFormat $ROOT_PARTITION"
    else
        # LUKS2 isnt implemented yet (GRUB)
        crypt_cmd="cryptsetup -c aes-xts-plain -s 512 luksFormat --type luks1 $ROOT_PARTITION"
    fi

    # Create encryption
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    # Open encrypt
    crypt_cmd="cryptsetup open $ROOT_PARTITION cryptroot"
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    #----------------------------------------
    # Format disk
    #----------------------------------------
    core_gauge_update 12 "Format $DISK"

    # Format /boot
    if [ "$uefi_mode" = "true" ]; then
        core_exec_command_wrap mkfs.fat -F32 "$BOOT_PARTITION"
    fi

    # Format crypted /
    core_exec_command_wrap mkfs.ext4 /dev/mapper/cryptroot

    #----------------------------------------
    # Mount disk to /mnt
    #----------------------------------------
    core_exec_command_wrap mount /dev/mapper/cryptroot /mnt

    if [ "$uefi_mode" = "true" ]; then
        core_exec_command_wrap mkdir /mnt/boot
        core_exec_command_wrap mount "$BOOT_PARTITION" /mnt/boot
    fi

    #----------------------------------------
    # Pacstrap base arch packages
    #----------------------------------------
    core_gauge_update 24 "Pacstrap Installation (may take a while)..."
    core_exec_command_wrap pacstrap /mnt base base-devel linux linux-firmware

    #----------------------------------------
    # Generate /etc/fstab
    #----------------------------------------
    core_gauge_update 52 "Generate /etc/fstab"
    local log_txt="genfstab -U /mnt >>/mnt/etc/fstab"
    if ! genfstab -U /mnt >>/mnt/etc/fstab; then
        core_log "e" "$log_txt"
        exit 1
    else
        core_log "c" "$log_txt"
    fi

    #----------------------------------------
    # Copy ecos in chroot env
    #----------------------------------------
    core_exec_command_wrap cp -f "$SCRIPT_FILE" /mnt/$SCRIPT_ID
    core_exec_command_wrap cp -f "$CORE_CONFIG_FILE" /mnt/$SCRIPT_ID.conf
    core_exec_command_wrap chmod +x /mnt/$SCRIPT_ID

    #----------------------------------------
    # Chroot into new system
    #----------------------------------------
    core_gauge_update 54 "Enter CHROOT Environement"
    log_txt="arch-chroot /mnt /$SCRIPT_ID --chroot-install $uefi_mode <ENCRYPTION_PASSWORD>"
    if ! arch-chroot /mnt "/$SCRIPT_ID" --chroot-install "$uefi_mode" "$password_encryption"; then
        core_log "e" "$log_txt"
        exit 1
    else
        core_log "c" "$log_txt"
    fi

    #----------------------------------------
    # Merge ecos logs
    #----------------------------------------
    cat "/mnt/$SCRIPT_ID.log" >>"$CORE_LOG_FILE"
    cp "/mnt/$SCRIPT_ID.error" "$SCRIPT_DIR/$SCRIPT_ID.error"
    rm -f "/mnt/$SCRIPT_ID"
    rm -f "/mnt/$SCRIPT_ID.conf"
    rm -f "/mnt/$SCRIPT_ID.log"
    rm -f "/mnt/$SCRIPT_ID.tui"

    #----------------------------------------
    # Unmount
    #----------------------------------------
    core_exec_command_wrap swapoff -a
    core_exec_command_wrap umount -R /mnt
    core_exec_command_wrap cryptsetup close cryptroot

    #----------------------------------------
    # Finished
    #----------------------------------------
    core_gauge_update 100 "Installation finished!"
    core_log "!!! INSTALLATION SUCCESSFULLY FINISHED !!!"

    exit 0
}

core_install_chroot() {

    local uefi_mode="$1"
    local password_encryption="$2"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$CORE_CONFIG_FILE"

    #----------------------------------------
    # Essential packages
    #----------------------------------------
    local gauge_txt="Install Essential Packages (may take a while)..."

    core_gauge_update 56 "$gauge_txt"
    core_exec_command_wrap pacman -Syy

    # Boootloader, Microcode Kernel Updates for CPU & Core Tools
    core_gauge_update 58 "$gauge_txt"
    bootloader_pkgs="efibootmgr"
    if [ "$uefi_mode" = "false" ]; then
        bootloader_pkgs="grub"
    fi
    core_exec_command_wrap pacman --noconfirm --needed -S $UCODE $bootloader_pkgs dosfstools gptfdisk $CUSTOM_PACKAGES

    # Network manager
    core_gauge_update 60 "$gauge_txt"
    core_exec_command_wrap pacman --noconfirm --needed -S networkmanager

    # Default shell
    core_gauge_update 70 "$gauge_txt"
    core_exec_command_wrap pacman --noconfirm --needed -S zsh

    if [ "$WORKSTATION" = "notebook" ]; then
        # Battery safer
        core_exec_command_wrap pacman --noconfirm --needed -S tlp
    fi

    #----------------------------------------
    # Swap
    #----------------------------------------
    if [ "$SWAP_SIZE" != "0" ] && [ -n "$SWAP_SIZE" ]; then
        core_gauge_update 75 "Create Swap File"
        core_exec_command_wrap dd if=/dev/zero of=/swapfile bs=1GiB count="$SWAP_SIZE" status=progress
        core_exec_command_wrap chmod 600 /swapfile
        core_exec_command_wrap mkswap /swapfile
        core_exec_command_wrap swapon /swapfile
        echo "# Swapfile" >>/etc/fstab
        echo "/swapfile none swap defaults 0 0" >>/etc/fstab
    fi

    #----------------------------------------
    # Timezone and localization
    #----------------------------------------
    core_exec_command_wrap ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
    core_exec_command_wrap hwclock --systohc

    #----------------------------------------
    # Keymap
    #----------------------------------------
    core_log "Create /etc/vconsole.conf"
    echo "KEYMAP=$VCONSOLE_KEYMAP" >/etc/vconsole.conf
    echo "FONT=lat9w-16" >>/etc/vconsole.conf

    #----------------------------------------
    # Locale
    #----------------------------------------
    core_log "Create /etc/locale.conf"
    echo "LANG=$LOCALE_LANG" >/etc/locale.conf

    #----------------------------------------
    # Set locale.gen
    #----------------------------------------
    for locale_gen_item in "${LOCALE_GEN[@]}"; do
        sed -i "s/^#$locale_gen_item/$locale_gen_item/g" "/etc/locale.gen"
    done

    core_gauge_update 78 "Generate Locale"
    core_exec_command_wrap locale-gen

    #----------------------------------------
    # Set hostname
    #----------------------------------------
    core_log "Create /etc/hostname"
    echo "$HOSTNAME" >/etc/hostname

    #----------------------------------------
    # Set hosts
    #----------------------------------------
    core_log "Create /etc/hosts"
    {
        echo '127.0.0.1    localhost'
        echo '::1          localhost'
    } >/etc/hosts

    #----------------------------------------
    # Network
    #----------------------------------------
    core_gauge_update 80 "Configure Network"
    core_exec_command_wrap systemctl enable NetworkManager

    #----------------------------------------
    # Boot loader
    #----------------------------------------
    core_gauge_update 82 "Install Bootloader"

    if [ "$uefi_mode" = true ]; then
        #----------------------------------------
        # Bootloader: systemd-boot
        #----------------------------------------

        core_exec_command_wrap bootctl --path=/boot install

        echo 'default arch.conf' >/boot/loader/loader.conf
        echo 'timeout 0' >>/boot/loader/loader.conf
        echo 'editor  yes' >>/boot/loader/loader.conf

        echo 'title   Arch Linux' >/boot/loader/entries/arch.conf
        echo 'linux   /vmlinuz-linux' >>/boot/loader/entries/arch.conf
        [ -n "$UCODE" ] && echo "initrd  /$UCODE.img" >>/boot/loader/entries/arch.conf
        echo 'initrd  /initramfs-linux.img' >>/boot/loader/entries/arch.conf
        echo "options cryptdevice=$ROOT_PARTITION:cryptroot root=/dev/mapper/cryptroot quiet splash loglevel=3 rd.systemd.show_status=false rd.udev.log_priority=3 vt.global_cursor_default=0 rw" >>/boot/loader/entries/arch.conf
    else
        #----------------------------------------
        # Bootloader: GRUB (for legacy BIOS)
        #----------------------------------------

        # Create a keyfile to prevent enter the encryption password twice
        local crypt_key="/crypto_keyfile.bin"

        core_exec_command_wrap dd bs=512 count=4 if=/dev/random of="$crypt_key" iflag=fullblock
        core_exec_command_wrap chmod 600 "$crypt_key"

        # When initramfs' permissions are set to 644 (by default), then all users will be able to dump the keyfile
        core_exec_command_wrap chmod 600 /boot/initramfs-linux*

        local crypt_cmd="cryptsetup luksAddKey $ROOT_PARTITION $crypt_key"
        if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
            core_log "e" "$crypt_cmd"
            exit 1
        else
            core_log "c" "$crypt_cmd"
        fi

        sed -i 's^FILES=()^FILES=('$crypt_key')^g' /etc/mkinitcpio.conf
        core_exec_command_wrap mkinitcpio -p linux

        # Mdify before execute grub-install!
        echo 'GRUB_ENABLE_CRYPTODISK=y' >/etc/default/grub
        echo 'GRUB_CMDLINE_LINUX="cryptdevice='$ROOT_PARTITION':cryptroot cryptkey=rootfs:'$crypt_key'"' >>/etc/default/grub

        core_exec_command_wrap grub-install --no-floppy "$DISK"
        core_exec_command_wrap grub-mkconfig -o /boot/grub/grub.cfg
    fi

    #----------------------------------------
    # Modify HOOKS
    #----------------------------------------
    core_log "Modify /etc/mkinitcpio.conf"
    cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.bak
    sed -i "s/filesystems keyboard fsck/filesystems fsck/g" /etc/mkinitcpio.conf
    sed -i "s/udev autodetect/udev keyboard autodetect/g" /etc/mkinitcpio.conf
    sed -i "s/block filesystems/block keymap encrypt filesystems/g" /etc/mkinitcpio.conf

    #----------------------------------------
    # Rebuild initrc
    #----------------------------------------
    core_gauge_update 85 "Rebuild Initial Ramdisk"
    core_exec_command_wrap mkinitcpio -p linux

    #----------------------------------------
    # Create new user
    #----------------------------------------
    core_exec_command_wrap useradd -m -G users,wheel,video,audio,storage,disk -s /bin/zsh "$USERNAME"

    #----------------------------------------
    # Allow users in group wheel to use sudo
    #----------------------------------------
    core_log "Enable sudo in /etc/sudoers"
    sed -i '/%wheel\sALL=(ALL)\sALL/s/^#\s//g' /etc/sudoers

    #----------------------------------------
    # Auto login tty1
    #----------------------------------------
    core_gauge_update 90 "Enable Automatic Login"
    mkdir -p "/etc/systemd/system/getty@tty1.service.d/"
    {
        echo "[Service]"
        echo "ExecStart="
        echo "ExecStart=-/usr/bin/agetty --skip-login --nonewline --noissue --autologin $USERNAME --noclear %I \$TERM"
    } >"/etc/systemd/system/getty@tty1.service.d/override.conf"
    core_exec_command_wrap systemctl enable getty@tty1

    #----------------------------------------
    # Xorg config
    #----------------------------------------

    # Create dir
    core_exec_command_wrap mkdir -p /etc/X11/xorg.conf.d/

    #----------------------------------------
    # Keyboard config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/00-keyboard.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "keyboard"'
        echo '    MatchIsKeyboard "yes"'
        echo '    Option "XkbLayout" "'$X11_KEYBOARD_LAYOUT'"'
        echo '    Option "XkbModel" "pc105"'
        echo '    Option "XkbVariant" "'$X11_KEYBOARD_VARIANT'"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/00-keyboard.conf"

    #----------------------------------------
    # Mouse config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/50-mouse.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "mouse"'
        echo '    Driver "libinput"'
        echo '    MatchIsPointer "yes"'
        echo '    Option "AccelProfile" "flat"'
        echo '    Option "AccelSpeed" "0"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/50-mouse.conf"

    #----------------------------------------
    # Touchpad config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/70-touchpad.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "touchpad"'
        echo '    Driver "libinput"'
        echo '    MatchIsTouchpad "on"'
        echo '    Option "ClickMethod" "clickfinger"'
        echo '    Option "Tapping" "off"'
        echo '    Option "NaturalScrolling" "true"'
        echo 'EndSection'

    } >"/etc/X11/xorg.conf.d/70-touchpad.conf"

    core_gauge_update 92 "Enable Daemons"

    #----------------------------------------
    # SSD fstrim
    #----------------------------------------
    core_exec_command_wrap systemctl enable "fstrim.timer"

    #----------------------------------------
    # Timesync service
    #----------------------------------------
    core_exec_command_wrap systemctl enable "systemd-timesyncd.service"

    #----------------------------------------
    # TODO (FAILED): Network browsing service
    #----------------------------------------
    #core_exec_command_wrap systemctl enable "avahi-daemon"

    #----------------------------------------
    # TLP (Notebook)
    #----------------------------------------
    if [ "$WORKSTATION" = "notebook" ]; then
        core_exec_command_wrap systemctl enable "tlp.service"
    fi

    #----------------------------------------
    # Pacman colors & multilib
    #----------------------------------------
    core_gauge_update 95 "Configure Pacman"
    core_log "Enable pacman multilib & colors"
    sed -i 's/^#Color/Color/g;/#\[multilib\]/,/#Include/ s/^#//g' /etc/pacman.conf
    core_exec_command_wrap pacman -Syy

    #----------------------------------------
    # ECOS Binary
    #----------------------------------------
    core_gauge_update 98 "ECOS Binary"

    # Copy ecos to local bin
    mkdir -p "/home/$USERNAME/.ecos/bin"
    cp "$SCRIPT_FILE" "/home/$USERNAME/.ecos/bin/ecos"
    chmod +x "/home/$USERNAME/.ecos/bin/ecos"

    # Create .zlogin
    local user_profile="/home/$USERNAME/.zlogin"
    echo '#!/bin/sh' >$user_profile
    echo 'export ECOS_HOME="$HOME/.ecos"' >>$user_profile
    echo 'export ECOS_CORE="$ECOS_HOME/bin/ecos"' >>$user_profile
    echo 'export PATH="$PATH:$ECOS_HOME/bin"' >>$user_profile
    echo '$ECOS_CORE --ecos-install' >>$user_profile
    chmod +x $user_profile

    #----------------------------------------
    # Deletes unnecessary files
    #----------------------------------------
    rm -f "/home/$USERNAME/.bash_logout"
    rm -f "/home/$USERNAME/.bash_profile"
    rm -f "/home/$USERNAME/.bashrc"
    rm -f "/home/$USERNAME/.zshrc"

    #----------------------------------------
    # Create state file
    #----------------------------------------
    local state_dir="/home/$USERNAME/.ecos/.cache/state"
    mkdir -p "$state_dir"
    echo "$SCRIPT_VERSION" >"$state_dir/core_initialized"

    #----------------------------------------
    # Set correct user permissions
    #----------------------------------------
    chown -R "$USERNAME":"$USERNAME" "/home/$USERNAME"

    #----------------------------------------
    # Change passwords
    #----------------------------------------
    core_log "Change passwords"
    #passwd root < <(echo -e "$password_encryption\n$password_encryption")
    #passwd "$USERNAME" < <(echo -e "$password_encryption\n$password_encryption")
    echo -e "$password_encryption\n$password_encryption" | (passwd)
    echo -e "$password_encryption\n$password_encryption" | (passwd "$USERNAME")

    #----------------------------------------
    # Chroot finished
    #----------------------------------------
    core_log "CHROOT successfully finished"
}

core_tui_show_logs() {
    touch "$CORE_LOG_FILE"
    tui_init 0 "$(cat "$CORE_LOG_FILE")"
    #whiptail --textbox $SCRIPT_TUI_FILE 0 $SCRIPT_TUI_WIDTH
    whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" 0 "$SCRIPT_TUI_WIDTH"
}

core_tui_check_disk() {

    if [ "$1" = "--force" ] || [ "$DISK" = "" ] || [ "$BOOT_PARTITION" = "" ] || [ "$ROOT_PARTITION" = "" ]; then

        local disk_array=()
        while read disk_line; do
            disk_size=$(lsblk -d -n -o SIZE /dev/$disk_line)
            disk_array+=("/dev/$disk_line")
            disk_array+=(" ($disk_size)")
        done < <(lsblk -I 8,259 -d -o KNAME -n)

        tui_init 24 "Choose Disk"
        if ! DISK=$(whiptail --menu "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" "${#disk_array[@]}" "${disk_array[@]}" 3>&1 1>&2 2>&3); then
            exit 0
        fi

        BOOT_PARTITION="${DISK}1"
        ROOT_PARTITION="${DISK}2"

        # NVM Express
        if [[ "$DISK" = "/dev/nvm"* ]]; then
            BOOT_PARTITION="${DISK}p1"
            ROOT_PARTITION="${DISK}p2"
        fi
    fi
}

core_tui_check_config() {

    if [ -f "$CORE_CONFIG_FILE" ]; then
        . "$CORE_CONFIG_FILE"
    fi

    #----------------------------------------
    # Check user
    #----------------------------------------
    if [ "$USERNAME" = "" ]; then
        tui_init 0 "Enter Username"
        if ! USERNAME=$(whiptail --inputbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$USERNAME" = "" ]; then
            tui_init 0 "Username was empty! Restart the Installation..."
            whiptail --textbox "$SCRIPT_TUI_FILE" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"
            exit 0
        fi
        core_replace_config_value "$CORE_CONFIG_FILE" "USERNAME" "$USERNAME"
    fi

    #----------------------------------------
    # Check workstation
    #----------------------------------------
    if [ "$WORKSTATION" = "" ]; then
        tui_init 20 "Choose Workstation"
        if ! WORKSTATION=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 2 "desktop" "Desktop" "notebook" "Notebook" 3>&1 1>&2 2>&3); then
            exit 0
        fi

        core_replace_config_value "$CORE_CONFIG_FILE" "HOSTNAME" "$USERNAME-$WORKSTATION"
        core_replace_config_value "$CORE_CONFIG_FILE" "WORKSTATION" "$WORKSTATION"
    fi

    #----------------------------------------
    # Check Language
    #----------------------------------------
    if [ "$LOCALE_LANG" = "" ] || [ ${#LOCALE_GEN[@]} = 0 ] || [ "$TIMEZONE" = "" ] || [ "$VCONSOLE_KEYMAP" = "" ] || [ "$X11_KEYBOARD_LAYOUT" = "" ] || [ "$X11_KEYBOARD_VARIANT" = "" ]; then

        tui_init 20 "Choose Setup Language"
        if ! lang_result=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 2 "en_US" "English" "de_DE" "German" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$lang_result" = "en_US" ]; then
            set_lang_en_US
        fi

        if [ "$lang_result" = "de_DE" ]; then
            set_lang_de_DE
        fi

        core_replace_config_value "$CORE_CONFIG_FILE" "TIMEZONE" "$TIMEZONE"
        core_replace_config_value "$CORE_CONFIG_FILE" "LOCALE_LANG" "$LOCALE_LANG"
        core_replace_config_array "$CORE_CONFIG_FILE" "LOCALE_GEN" "${LOCALE_GEN[@]}"
        core_replace_config_value "$CORE_CONFIG_FILE" "VCONSOLE_KEYMAP" "$VCONSOLE_KEYMAP"
        core_replace_config_value "$CORE_CONFIG_FILE" "X11_KEYBOARD_LAYOUT" "$X11_KEYBOARD_LAYOUT"
        core_replace_config_value "$CORE_CONFIG_FILE" "X11_KEYBOARD_VARIANT" "$X11_KEYBOARD_VARIANT"
    fi

    #----------------------------------------
    # Check Microcode
    #----------------------------------------
    if [ "$UCODE" = "" ]; then

        tui_init 18 "Choose Processor Microcode"
        if ! UCODE=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3 "none" "Disable" "intel-ucode" "Intel" "amd-ucode" "AMD" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$UCODE" = 'none' ]; then
            UCODE=''
        fi

        core_replace_config_value "$CORE_CONFIG_FILE" "UCODE" "$UCODE"
    fi

    #----------------------------------------
    # Check disk
    #----------------------------------------
    core_tui_check_disk
    core_replace_config_value "$CORE_CONFIG_FILE" "DISK" "$DISK"
    core_replace_config_value "$CORE_CONFIG_FILE" "BOOT_PARTITION" "$BOOT_PARTITION"
    core_replace_config_value "$CORE_CONFIG_FILE" "ROOT_PARTITION" "$ROOT_PARTITION"

    #----------------------------------------
    # Add default values
    #----------------------------------------
    core_check_config_key "$CORE_CONFIG_FILE" "SWAP_SIZE" "$SWAP_SIZE"
    core_check_config_key "$CORE_CONFIG_FILE" "CUSTOM_PACKAGES" "$CUSTOM_PACKAGES"

    #----------------------------------------
    # Show default config screen
    #----------------------------------------
    tui_init 0 "$(cat "$CORE_CONFIG_FILE")"
    tui_add 28 "\nEdit Setup Configuration?"
    if (whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" 0 "$SCRIPT_TUI_WIDTH"); then
        nano "$CORE_CONFIG_FILE"
        wait
        # Check again after edit
        core_tui_check_config
    fi

    #----------------------------------------
    # Source changes
    #----------------------------------------
    . "$CORE_CONFIG_FILE"
}

core_reset_config() {

    core_log "Reset core configuration"

    # Reset config
    if [ -f "$CORE_CONFIG_FILE" ]; then
        mv -f "$CORE_CONFIG_FILE" "$CORE_CONFIG_FILE"".backup"
    fi

    # Reset logs
    if [ -f "$CORE_LOG_FILE" ]; then
        mv -f "$CORE_LOG_FILE" "$CORE_LOG_FILE"".backup"
    fi

    # Unmount
    swapoff -a
    umount -R /mnt
    cryptsetup close cryptroot

    core_log "Reset finished!"
}

core_log() {

    touch "$CORE_LOG_FILE"

    # Default vaules
    local lvl="INFO"
    local text="$1"

    # Handle if 2. parameter is set
    if [ "$2" != "" ]; then

        if [ "$1" = "c" ]; then
            lvl="EXEC"
        fi

        if [ "$1" = "e" ]; then
            lvl="FAIL"
        fi

        # Shift to 2. argument to you $* for all instead of $2
        shift
        text="$*"
    fi

    # Style log output
    local styled_text="$(date "+%Y-%m-%d %H:%M:%S") $SCRIPT_ID-$SCRIPT_VERSION | $lvl | $text"

    # Print to STOUT & CORE_LOG_FILE
    printf '%s\n' "$styled_text" >>"$CORE_LOG_FILE"
    printf '%s\n' "$styled_text"
}

core_exec_command_wrap() {
    # !!! DO NOT USE WITH PIPE (|) OR REDIRECT (>>) !!!

    local command_txt="$*"
    local tmp_error="$SCRIPT_DIR/$SCRIPT_ID.error"

    if "$@" >/dev/null 2>"$tmp_error"; then
        core_log "c" "$command_txt"
        rm -f "$tmp_error"
        return 0
    else
        core_log "e" "$command_txt"
        cat "$tmp_error" >>"$CORE_LOG_FILE"
        cat "/mnt/$SCRIPT_ID.log" >>"$CORE_LOG_FILE"
        rm -f "$tmp_error"
        exit 1
    fi
}

core_gauge_update() {
    local percent="$1"
    local text="$2"
    tui_init 0 "$text"
    echo -e "XXX\n$percent\n$(cat "$SCRIPT_TUI_FILE")\nXXX"
}

core_check_config_key() {
    local config_file="$1"
    local config_key="$2"
    local config_value="$3"
    touch "$config_file"
    if ! grep -qrnw "$config_file" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$config_file"
    fi
}

core_replace_config_value() {
    local config_file="$1"
    local key="$2"
    local value="$3"
    core_check_config_key "$config_file" "$key" "$value"
    sed -i "s#$key=.*#$key=\"$value\"#g" "$config_file"
}

core_replace_config_array() {
    local config_file="$1" && shift
    local key=$1 && shift
    local value=("$@")

    local items_txt='( '
    for item in "${value[@]}"; do
        items_txt="$items_txt'$item' "
    done
    items_txt="$items_txt"')'

    core_check_config_key "$config_file" "$key" ""
    sed -i "s#$key=.*#$key=$items_txt#g" "$config_file"
}

#/////////////////////////////////////////////////////
# ECOS INSTALLATION
#/////////////////////////////////////////////////////

ecos_check_git() {
    if ! pacman -Qi git >/dev/null; then
        echo "Create Git config"
        mkdir -p "$HOME/.config/git"
        if [ -f "$HOME/.config/git/config" ]; then
            mv "$HOME/.config/git/config" "$HOME/.config/git/config.bak"
        fi
        {
            echo "[user]"
            echo "    email = ${USER}@$(cat /etc/hostname)"
            echo "    name = ${USER}"
            echo "[credential]"
            echo "    helper = /usr/lib/git-core/git-credential-libsecret"
            echo "[pull]"
            echo "    rebase = false"
        } >"$HOME/.config/git/config"

        echo "Install Git"
        sudo pacman --noconfirm --needed -Syy git
    fi
}

ecos_check_paru() {
    if ! pacman -Qi paru >/dev/null; then
        echo "Installing AUR Helper Paru (may take a while)..."

        # Prepare
        local paru_build_tmp="$HOME/Downloads/paru"
        rm -rf "$paru_build_tmp"
        mkdir -p "$paru_build_tmp"

        # Clone
        ecos_check_git
        git clone "https://aur.archlinux.org/paru-bin.git" "$paru_build_tmp"
        cd "$paru_build_tmp" || exit 1

        # Install aur helper
        makepkg -si --noconfirm --needed

        # Symlink to yay
        sudo ln -sf /usr/bin/paru /usr/bin/yay

        # Config
        sudo sed -i 's/^#BottomUp/BottomUp/g' /etc/paru.conf
        sudo sed -i 's/^#SudoLoop/SudoLoop/g' /etc/paru.conf

        # Remove download dir
        cd "$HOME" || exit 1
        rm -rf "$paru_build_tmp"
    fi
}

ecos_check_zenity() {
    if ! pacman -Qi zenity >/dev/null; then
        sudo pacman --noconfirm --needed -Syy zenity
    fi
}

ecos_create_desktop_file() {
    mkdir -p "$HOME/.local/share/applications/"
    {
        echo "[Desktop Entry]"
        echo "Name=ECOS"
        echo "Icon="$ECOS_ICON_FILE""
        echo 'Exec=bash -c "$HOME/.ecos/bin/ecos --manager"'
        echo "Type=Application"
    } >"$ECOS_DESKTOP_FILE"
    chmod +x "$ECOS_DESKTOP_FILE"
}

ecos_init_ecos() {
    mkdir -p "$ECOS_HOME"
    mkdir -p "$ECOS_BIN_DIR"
    mkdir -p "$ECOS_CONFIG_DIR"
    mkdir -p "$ECOS_USER_TWEAKS_DIR"
    mkdir -p "$ECOS_WORKING_DIR"
    mkdir -p "$ECOS_STATE_DIR"
    mkdir -p "$HOME/.local/share/applications"

    # DEFAULT CONFIG PROPERTIES
    core_check_config_key "$ECOS_CONFIG_FILE" "TERMINAL_EXEC" "$TERMINAL_EXEC"

    # SOURCE ECOS CONFIG
    . "$ECOS_CONFIG_FILE"
}

ecos_tui_install_ecos() {

    check_internet
    ecos_init_ecos

    tui_init 0 "Dotfiles URL"
    if ! ECOS_DOTS_DEFAULT_URL=$(whiptail --inputbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" "$ECOS_DOTS_DEFAULT_URL" 3>&1 1>&2 2>&3); then
        main
        exit 0
    fi
    if [ "$ECOS_DOTS_DEFAULT_URL" = "" ]; then
        tui_init 0 "Dotfiles URL was empty!"
        whiptail --textbox "$SCRIPT_TUI_FILE" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"
        return 1
    fi

    clear
    print_header

    cd "$HOME" || exit 1

    print_title "CHECK GIT"
    ecos_check_git
    echo -e "DONE"

    print_title "CHECK PARU"
    ecos_check_paru
    echo -e "DONE"

    print_title "INSTALL ECOS CORE"
    ecos_update_core
    echo -e "DONE"

    print_title "INSTALL ECOS REPO"
    ecos_update_repo
    echo -e "DONE"

    print_title "CLONE DOTFILES"
    rm -rf "$ECOS_DOTFILES"
    mkdir -p "$ECOS_DOTFILES"
    cd "$HOME" || exit 1

    # Removing existing init
    if [ -f "$ECOS_INIT_SCRIPT" ]; then
        "$ECOS_INIT_SCRIPT" --remove
    fi

    # Clone dotfiles
    /usr/bin/git clone --bare "$ECOS_DOTS_DEFAULT_URL" "$ECOS_DOTFILES"

    # Reset dotfiles
    /usr/bin/git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" fetch --all
    /usr/bin/git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" reset --hard HEAD
    /usr/bin/git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" config --local status.showUntrackedFiles no

    echo -e "DONE"

    print_title "INIT DOTFILES"
    if [ ! -f "$ECOS_INIT_SCRIPT" ]; then
        echo "ERROR: $ECOS_INIT_SCRIPT not found"
        exit 1
    fi

    # Create dots bin
    local dots_bin="$ECOS_BIN_DIR/dots"
    mkdir -p "$ECOS_BIN_DIR"
    echo '#!/bin/sh' >"$dots_bin"
    echo 'git --git-dir="'$ECOS_DOTFILES'" --work-tree="$HOME" "$@"' >>"$dots_bin"
    chmod +x "$dots_bin"

    # Silent Boot
    echo '# Disable the last login message on startup with this file' >"$HOME/.hushlogin"

    # Create Desktop file
    print_title 'CREATE ECOS DESKTOP FILE'
    ecos_create_desktop_file
    echo -e "DONE"

    # Call init script
    echo -e "EXECUTE $ECOS_INIT_SCRIPT"
    chmod +x "$ECOS_INIT_SCRIPT" || exit 1
    "$ECOS_INIT_SCRIPT" --init
    "$ECOS_INIT_SCRIPT" --update
    # Remove zlogin file from core
    rm -f "$HOME/.zlogin"
    # Create initialized state file
    echo "$SCRIPT_VERSION" >"$ECOS_STATE_INITIALIZED"
    echo -e "DONE"

    wait
    tui_init 0 "ECOS Installation finished"
    tui_add 0 "Reboot now?"
    if (whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"); then
        reboot
    fi

    exit 0
}

#/////////////////////////////////////////////////////
# UPDATE
#/////////////////////////////////////////////////////

ecos_update_core() {

    check_internet
    ecos_init_ecos

    cd "$HOME" || exit 1

    local ecos_update="$ECOS_WORKING_DIR/ecos.update"
    if ! curl -s -L "$ECOS_CORE_RELEASE_URL" >"$ecos_update"; then
        echo "ERROR: ECOS CORE UPDATE DOWNLOAD: $ECOS_CORE_RELEASE_URL"
        exit 1
    fi
    if [ ! -f "$ecos_update" ]; then
        echo "ERROR: ECOS CORE UPDATE NOT FOUND: $ecos_update"
        exit 1
    else
        if ! chmod +x "$ecos_update"; then
            echo "ERROR: CHMOD CORE UPDATE: $ecos_update"
            exit 1
        fi
        local ecos_current_version="$($ECOS_CORE --version)"
        local ecos_update_version="$($ecos_update --version)"
        if [ "$ecos_current_version" != "$ecos_update_version" ]; then
            if ! mv "$ecos_update" "$ECOS_CORE"; then
                echo "ERROR: MOVE CORE: $ecos_update --> $ECOS_CORE"
                exit 1
            fi
            if ! chmod +x "$ECOS_CORE"; then
                echo "ERROR: CHMOD CORE: $ECOS_CORE"
                exit 1
            fi
            echo "NEW ECOS CORE UPDATE: $ecos_current_version --> $ecos_update_version"
            touch "$ECOS_STATE_SHOW_CHANGELOG"
        else
            rm -f "$ecos_update"
            echo "$SCRIPT_TITLE $($ECOS_CORE --version): NO CORE UPDATE AVAILABLE (REMOTE: $ecos_update_version)"
        fi
    fi
}

ecos_update_repo() {

    ecos_init_ecos
    cd "$HOME" || exit 1

    if ! [ -d "$ECOS_REPO/.git" ]; then
        echo "CLONE ECOS REPO"
        mkdir -p "$ECOS_REPO"
        /usr/bin/git clone "$ECOS_REPO_URL" "$ECOS_REPO"
    fi

    echo "UPDATE ECOS REPO"
    cd "$ECOS_REPO" || exit 1
    /usr/bin/git fetch --all
    /usr/bin/git reset --hard origin/HEAD
    /usr/bin/git clean -d -f
    /usr/bin/git pull

    # Add user tweaks
    if [ -d "$ECOS_USER_TWEAKS_DIR" ]; then

        readarray -d '' user_tweaks_list < <(find "$ECOS_USER_TWEAKS_DIR" -mindepth 1 -maxdepth 1 -type d -print0)

        for i in "${user_tweaks_list[@]}"; do

            local tweak_id="$(basename $i)"
            local tweak_sh="$ECOS_USER_TWEAKS_DIR/$tweak_id/${tweak_id}.sh"

            # Check sh file
            if ! [ -f "$tweak_sh" ]; then
                continue
            fi

            #Copy User tweaks
            cp -r "$ECOS_USER_TWEAKS_DIR/$tweak_id" "$ECOS_REPO/tweaks/$tweak_id"
        done
    fi
}

ecos_update_system() {

    clear
    print_header
    check_internet

    print_title 'CHECK ECOS DEPENDENCIES'
    ecos_check_git
    ecos_check_paru
    ecos_check_zenity
    echo ">>> OK"

    print_title 'UPDATE ECOS CORE'
    ecos_update_core
    echo ">>> OK"

    print_title 'UPDATE ECOS REPO'
    ecos_update_repo
    echo ">>> OK"

    # PACKAGE UPDATE
    print_title 'FETCH NEW PACKAGES'
    paru -Syy

    echo -e '\n'
    echo -e '------------------------------------------'
    read -p "Continue ECOS System Upgrade? [y/n]: " user_input
    if [ "$user_input" != "y" ]; then
        echo "Skipped..."
        exit 0
    fi
    echo -e '------------------------------------------'

    # PACKAGE UPGRADE
    print_title 'UPGRADE NEW PACKAGES'
    paru -Qu
    if ! paru -Su --noconfirm; then
        echo -e "ERROR: paru"
        exit 1
    fi
    wait
    echo ">>> OK"

    # DOTFILES UPDATE
    print_title 'ECOS DOTFILES UPDATE'
    cd "$HOME" || exit 1

    # CURRENT INIT VERSION
    local current_init_script_version=''
    if [ -f "$ECOS_INIT_SCRIPT" ]; then
        current_init_script_version="$($ECOS_INIT_SCRIPT --version)"
    fi

    # RESET LOCAL FILES
    git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" fetch --all
    git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" reset --hard HEAD
    git --git-dir="$ECOS_DOTFILES" --work-tree="$HOME" pull
    echo ">>> OK"

    # UPDATE TWEAKS
    print_title 'UPDATE ECOS TWEAKS'
    ecos_update_tweaks
    echo ">>> OK"

    # UPDATE INIT FILE
    if [ -f "$ECOS_INIT_SCRIPT" ]; then

        # Check initialized version
        local ecos_initialized_version=""
        if [ -f "$ECOS_STATE_INITIALIZED" ]; then
            ecos_initialized_version=$(<"$ECOS_STATE_INITIALIZED")
        fi

        # Update if initialized file not exists or new init script available
        local new_init_script_version="$($ECOS_INIT_SCRIPT --version)"
        if [ "$SCRIPT_VERSION" != "$ecos_initialized_version" ] || [ "$new_init_script_version" != "$current_init_script_version" ]; then
            print_title "UPDATE INIT SCRIPT"
            read -p "UPDATE INIT SCRIPT? [y/n]: " user_input
            if [ "$user_input" != "y" ]; then
                echo -e "UPDATE INIT SCRIPT SKIPPED..."
                echo ">>> OK"
            else
                echo "UPDATE INIT SCRIPT"
                "$ECOS_INIT_SCRIPT" --update
                echo "$SCRIPT_VERSION" >"$ECOS_STATE_INITIALIZED"
                echo ">>> OK"
            fi
        else
            print_title "INIT SCRIPT UP TO DATE. SKIPPED..."
            echo ">>> OK"
        fi
    fi

    # UPDATE DESKTOP FILE
    print_title 'UPDATE ECOS DESKTOP FILE'
    ecos_create_desktop_file
    echo ">>> OK"

    # FINISH
    print_title '!! ECOS UPDATE FINISHED !!'
    echo ""
    read -p "Press any Key to close..."
    exit 0
}

#/////////////////////////////////////////////////////
# TWEAKS
#/////////////////////////////////////////////////////

ecos_tui_menu_tweaks() {

    ecos_check_git
    ecos_check_paru

    local tweaks_array_all=()
    local tweaks_array_enabled=()
    local tweaks_array_disabled=()
    local tweak_dir_list=()

    #----------------------------------------
    # READ TWEAK LIST
    #----------------------------------------
    readarray -d '' tweak_dir_list < <(find "$ECOS_REPO/tweaks" -mindepth 1 -maxdepth 1 -type d -print0)

    for i in "${tweak_dir_list[@]}"; do

        local tweak_id="$(basename $i)"
        local tweak_sh="$ECOS_REPO/tweaks/$tweak_id/${tweak_id}.sh"
        local tweak_meta="$ECOS_CACHE_TWEAKS/$tweak_id/${tweak_id}.tweak"

        # Check sh file
        if ! [ -f "$tweak_sh" ]; then
            continue
        fi

        # Check if installed
        if [ -f "$tweak_meta" ]; then
            # Add to enabled
            tweaks_array_enabled+=("$tweak_id")
        else
            # Add to disabled
            tweaks_array_disabled+=("$tweak_id")
        fi

        # Add to all
        tweaks_array_all+=("$tweak_id")
    done

    #echo "ALL: ${tweaks_array_all[@]}"
    #echo "ENABLED: ${tweaks_array_enabled[@]}"
    #echo "DISABLED: ${tweaks_array_disabled[@]}"

    #----------------------------------------
    # TUI SELECT TWEAK ACTION
    #----------------------------------------
    tui_init 28 "TWEAKS"
    local tweaks_info="                             ${#tweaks_array_enabled[@]}/${#tweaks_array_all[@]}"
    local tweak_action_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n\n$tweaks_info" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3 "install" "Install" "update" "Update" "remove" "Remove" 3>&1 1>&2 2>&3)
    if [ "$tweak_action_input" = "" ]; then
        exit 0
    fi

    local selected_tweaks_array=()
    local tweak_status='off'

    if [ "$tweak_action_input" = "install" ]; then
        tweak_status='off'
        selected_tweaks_array=("${tweaks_array_disabled[@]}")
    fi
    if [ "$tweak_action_input" = "update" ]; then
        tweak_status='on'
        selected_tweaks_array=("${tweaks_array_enabled[@]}")
    fi
    if [ "$tweak_action_input" = "remove" ]; then
        tweak_status='off'
        selected_tweaks_array=("${tweaks_array_enabled[@]}")
    fi

    #----------------------------------------
    # CREATE WHIPTAIL ARRAY
    #----------------------------------------
    local whiptail_tweaks_array=()
    for i in "${selected_tweaks_array[@]}"; do
        local tweak_id="$i"
        whiptail_tweaks_array+=("${tweak_id} ${tweak_id} ${tweak_status}")
    done
    # Sort array
    IFS=$'\n' whiptail_tweaks_array_sorted=($(sort <<<"${whiptail_tweaks_array[*]}"))
    unset IFS

    #----------------------------------------
    # TUI TWEAK LIST
    #----------------------------------------
    tui_init 0 ""
    local menu_input=$(whiptail --checklist --notags "$(cat "$SCRIPT_TUI_FILE")\n\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 10 ${whiptail_tweaks_array_sorted[@]} 3>&1 1>&2 2>&3)
    if [ "$menu_input" = "" ]; then
        ecos_tui_menu_tweaks '--no-update'
        exit 0
    fi

    local selected_array=($(echo "$menu_input" | tr -d '"'))
    clear
    echo "SELECTED TWEAKS: ${selected_array[*]}"

    #----------------------------------------
    # EXECUTE TWEAK LIST
    #----------------------------------------
    for i in "${selected_array[@]}"; do
        ecos_exec_tweak "$tweak_action_input" "$i"
        wait
    done

    ecos_tui_menu_tweaks '--no-update'
}

ecos_exec_tweak() {

    local tweak_action="$1"
    local tweak_id="$2"
    local tweak_res_dir="$ECOS_REPO/tweaks/$tweak_id"
    local tweak_cache_dir="$ECOS_CACHE_TWEAKS/$tweak_id"
    local tweak_sh="$tweak_res_dir/${tweak_id}.sh"
    local tweak_meta="$tweak_cache_dir/${tweak_id}.tweak"

    #----------------------------------------
    # Check
    #----------------------------------------
    if [ "$tweak_id" = "" ]; then
        echo -e "Error: Tweak ID is empty.\nExecute with:\n$ECOS_CORE --tweak TWEAK_ACTION TWEAK_ID"
        exit 1
    fi

    if [ "$tweak_action" = "" ]; then
        echo -e "Error: TWEAK_ACTION is empty.\nExecute with:\n$ECOS_CORE --tweak TWEAK_ACTION TWEAK_ID"
        exit 1
    fi

    #----------------------------------------
    # Execute Tweak
    #----------------------------------------
    if [ "$tweak_action" = "install" ] || [ "$tweak_action" = "remove" ] || [ "$tweak_action" = "update" ]; then
        print_title "TWEAK | $tweak_action: $tweak_id"
        if ! [ -f "$tweak_sh" ]; then
            echo "Error: $tweak_id not exists ($tweak_sh)"
            return 1
        fi

        # Create tweak cache dir
        mkdir -p "$tweak_cache_dir"

        chmod +x "$tweak_sh"
        cd "$tweak_cache_dir" || exit 1

        # Execute tweak
        if ECOS_HOME="$ECOS_HOME" "$tweak_sh" "--$tweak_action" "$tweak_res_dir" "$tweak_cache_dir"; then

            # Install or update on success
            if [ "$tweak_action" = "install" ] || [ "$tweak_action" = "update" ]; then
                echo "$(date "+%Y-%m-%d-%H:%M:%S")" >"$tweak_meta"
                echo -e "\nTWEAK $tweak_id:  Successfully installed/updated\n"
            fi

            # Remove on success
            if [ "$tweak_action" = "remove" ]; then
                rm -rf "$tweak_cache_dir"
                echo -e "\nTWEAK $tweak_id:  Successfully removed\n"
            fi
        else
            # Remove dir if error during execution
            rm -rf "$tweak_cache_dir"
            echo -e "\nTWEAK $tweak_id: Failed\n"
        fi
    else
        echo "Error: TWEAK_ACTION=$tweak_action not supported"
    fi
}

ecos_update_tweaks() {
    local tweak_dir_list=()
    readarray -d '' tweak_dir_list < <(find "$ECOS_CACHE_TWEAKS" -mindepth 1 -maxdepth 1 -type d -print0)
    for i in "${tweak_dir_list[@]}"; do
        local tweak_id="$(basename $i)"
        local tweak_sh="$ECOS_REPO/$tweak_id/${tweak_id}.sh"
        ecos_exec_tweak "update" "$tweak_id"
    done
}

#/////////////////////////////////////////////////////
# CREATE USB STICK
#/////////////////////////////////////////////////////

tui_create_usb() {

    if ! [ -x "$(command -v whiptail)" ]; then
        echo "ERROR: whiptail not installed"
        exit 1
    fi

    if ! [ -x "$(command -v curl)" ]; then
        echo "ERROR: curl not installed"
        exit 1
    fi

    if ! [ -x "$(command -v dd)" ]; then
        echo "ERROR: dd not installed"
        exit 1
    fi

    # Select Disk
    #--------------------------------------------
    local disk_array=()
    while read disk_line; do
        disk_size=$(lsblk -d -n -o SIZE /dev/$disk_line)
        disk_array+=("/dev/$disk_line")
        disk_array+=(" ($disk_size)")
    done < <(lsblk -I 8 -d -o KNAME -n)

    local usb_disk=''
    tui_init 11 "Choose USB Stick for ECOS Installation"
    if ! usb_disk=$(whiptail --menu "$(cat "$SCRIPT_TUI_FILE")\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" "${#disk_array[@]}" "${disk_array[@]}" 3>&1 1>&2 2>&3); then
        main
        exit 0
    fi

    local local_iso_dir="$ECOS_WORKING_DIR/arch-iso"
    local iso_url="$ECOS_ARCH_ISO_ROOT_URL/$ECOS_ARCH_ISO_FILE"
    local sha1_url="$ECOS_ARCH_ISO_ROOT_URL/$ECOS_ARCH_ISO_SHA1"
    local local_iso_file="$local_iso_dir/$ECOS_ARCH_ISO_FILE"
    local local_sha1_file="$local_iso_dir/$ECOS_ARCH_ISO_FILE.sha1"

    mkdir -p "$local_iso_dir"

    # Check and download arch iso
    #--------------------------------------------
    print_header
    print_title "USB Disk: $usb_disk"

    # Downloading ISO
    if ! [ -f "$local_iso_file" ]; then
        print_title "Downloading ISO: $iso_url"
        if ! curl -L "$iso_url" -o "$local_iso_file.part"; then
            echo "ERROR: Downloading ISO $iso_url"
            exit 1
        fi
        wait
        if ! mv "$local_iso_file.part" "$local_iso_file"; then
            echo "ERROR: Moving ISO $local_iso_file"
            exit 1
        fi
    fi

    # Downloading SHA1 Sum
    if ! [ -f "$local_sha1_file" ]; then
        print_title "Downloading SHA1: $sha1_url"
        if ! curl -L "$sha1_url" -o "$local_sha1_file.part"; then
            echo "ERROR: Downloading SHA1 Sum $sha1_url"
            exit 1
        fi
        wait
        if ! mv "$local_sha1_file.part" "$local_sha1_file"; then
            echo "ERROR: Moving SHA1 Sum $local_sha1_file"
            exit 1
        fi
    fi

    # Check SHA1 Sum
    cd "$local_iso_dir" || exit 1
    if grep -qrnw "$local_sha1_file" -e "$(sha1sum "$ECOS_ARCH_ISO_FILE")"; then
        print_title "SHA1 Checksum correct"
    else
        print_title "ERROR: SHA1 Checksum incorrect"
        exit 1
    fi

    print_title "Arch ISO: $local_iso_file"

    # Create Bootable USB Stick
    #--------------------------------------------
    print_title "Create Bootable USB Stick"

    if ! sudo dd bs=4M if="$local_iso_file" of="$usb_disk" status=progress oflag=sync; then
        echo "ERROR: Creating USB Stick"
        exit 1
    fi

    # Finished
    wait && print_title "FINISHED! Please remove the USB Stick $usb_disk"
}

#/////////////////////////////////////////////////////
# RECOVERY
#/////////////////////////////////////////////////////

tui_open_recovery() {

    #----------------------------------------
    # Select Disk
    #----------------------------------------
    core_tui_check_disk --force

    #----------------------------------------
    # Open Crypt
    #----------------------------------------
    clear
    print_header
    print_title "OPEN CRYPTED: $ROOT_PARTITION"
    echo -e "\nENTER YOUR ENCRYPTION PASSWORD\n"
    cryptsetup open $ROOT_PARTITION cryptroot

    #----------------------------------------
    # Mount
    #----------------------------------------
    local mnt_recovery='/mnt/recovery'
    print_title "MOUNT TO $mnt_recovery"
    mkdir -p "$mnt_recovery"
    mount /dev/mapper/cryptroot "$mnt_recovery"
    mkdir -p "$mnt_recovery/boot"
    mount -p "$BOOT_PARTITION" "$mnt_recovery/boot"

    #----------------------------------------
    # Chroot
    #----------------------------------------
    clear
    print_header
    print_title "ECOS RECOVERY"

    # Mount /boot in recovery system
    if ! arch-chroot "$mnt_recovery" mount $BOOT_PARTITION /boot; then
        echo "CHROOT Mount /boot"
        exit 1
    fi
    echo -e "\n"
    echo -e "!! YOUR ARE NOW ON YOUR RECOVERY SYSTEM !!"
    echo -e "        Leave with command 'exit'         "
    echo -e "\n"
    arch-chroot "$mnt_recovery"
    wait

    #----------------------------------------
    # Unmount
    #----------------------------------------
    clear
    print_header
    print_title "UNMOUNT"
    swapoff -a
    umount -R "$mnt_recovery"
    cryptsetup close cryptroot
}

#/////////////////////////////////////////////////////
# HELPER
#/////////////////////////////////////////////////////

tui_init() {
    rm -f "$SCRIPT_TUI_FILE"
    echo '
             ███████╗ ██████╗ ██████╗ ███████╗
             ██╔════╝██╔════╝██╔═══██╗██╔════╝
             █████╗  ██║     ██║   ██║███████╗
             ██╔══╝  ██║     ██║   ██║╚════██║
             ███████╗╚██████╗╚██████╔╝███████║
             ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝
                                       v.'$SCRIPT_VERSION'
    ' >"$SCRIPT_TUI_FILE"
    tui_add "$1" "$2"
}

tui_add() {

    echo_whitespaces() {
        #----------------------------------------
        # Echo a string with leading spaces
        #   $1: number of spaces
        #   $2: string
        #----------------------------------------
        local spaces=""
        for i in $(seq 1 "$1"); do
            spaces=" ${spaces}"
        done
        echo -e "$spaces""$2"
    }

    echo -e "$(echo_whitespaces "$1" "$2")\n" >>"$SCRIPT_TUI_FILE"
}

print_header() {
    echo '
    ███████╗ ██████╗ ██████╗ ███████╗
    ██╔════╝██╔════╝██╔═══██╗██╔════╝
    █████╗  ██║     ██║   ██║███████╗
    ██╔══╝  ██║     ██║   ██║╚════██║
    ███████╗╚██████╗╚██████╔╝███████║
    ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝
                              v.'$SCRIPT_VERSION''
}

print_title() {
    echo -e "\n"
    echo -e ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    echo -e "> $1"
    echo -e ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
}

check_internet() {
    # curl -Is "http://www.google.com" | head -1 | grep 200 >/dev/null
    if ! ping archlinux.de -c 1 >/dev/null 2>&1; then
        tui_init 0 "Error: No Internet Connection!"
        whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" 0 "$SCRIPT_TUI_WIDTH"
        exit 1
    fi
}

#/////////////////////////////////////////////////////
# TRAP
#/////////////////////////////////////////////////////

on_trap() {
    rm -f "$SCRIPT_TUI_FILE"
}

# Set trap
trap 'on_trap' 0 1 3 6

#/////////////////////////////////////////////////////
# EXECUTE
#/////////////////////////////////////////////////////

main "$@"
