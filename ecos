#!/bin/bash
ECOS_VERSION=2.2.7

#/////////////////////////////////////////////////////
# VARIABLES
#/////////////////////////////////////////////////////

# SCRIPT
SCRIPT_ID="ecos"
SCRIPT_TITLE="ECOS"
SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_TUI_FILE="$SCRIPT_DIR/.$SCRIPT_ID.tui"
SCRIPT_TUI_WIDTH=68
SCRIPT_TUI_HEIGHT=24

# URLS
ECOS_REPO_URL="https://github.com/murkl/ecos.git"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/murkl/ecos/main/ecos"
ECOS_DOTS_GNOME_URL="https://github.com/murkl/dotfiles-gnome.git"
ECOS_DOTS_BSPWM_URL="https://github.com/murkl/dotfiles-bspwm.git"

# ECOS HOME
ECOS_HOME="$HOME/.ecos"
ECOS_WORKING_DIR="$ECOS_HOME/.system"
ECOS_REPO_DIR="$ECOS_WORKING_DIR/repo"
ECOS_BIN_DIR="$ECOS_HOME/bin"
ECOS_DOTFILES_DIR="$ECOS_WORKING_DIR/dotfiles"
ECOS_INIT_SCRIPT="$ECOS_HOME/init.sh"

# ECOS ASSETS
ECOS_ICON_FILE="$SCRIPT_DIR/assets/ecos.svg"
ECOS_CHANGELOG_FILE="$SCRIPT_DIR/assets/changelog.html"
ECOS_DESKTOP_FILE="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
ECOS_AUTOSTART_FILE="$HOME/.config/autostart/$SCRIPT_ID.desktop"

# ECOS BIN LINK
ECOS_BIN="$ECOS_REPO_DIR/ecos"
ECOS_BIN_LINK="$ECOS_BIN_DIR/ecos"

# ECOS CONFIG
ECOS_CONFIG_DIR="$ECOS_HOME/config"
ECOS_CONFIG_FILE="$ECOS_CONFIG_DIR/ecos.conf"

# ECOS STATE
ECOS_STATE_DIR="$ECOS_WORKING_DIR/state"
ECOS_STATE_INITIALIZED_FILE="$ECOS_STATE_DIR/ecos_initialized"
ECOS_STATE_SHOW_CHANGELOG="$ECOS_STATE_DIR/ecos_show_changelog"
ECOS_STATE_LATEST_INIT="$ECOS_STATE_DIR/ecos_latest_init"

# ECOS TWEAKS
ECOS_TWEAKS_DIR="$SCRIPT_DIR/tweaks"
ECOS_TWEAKS_USER_DIR="$ECOS_HOME/tweaks"
ECOS_TWEAKS_META_DIR="$ECOS_WORKING_DIR/tweaks-meta"

# ECOS DRIVER
ECOS_DRIVER_DIR="$SCRIPT_DIR/driver"
ECOS_DRIVER_GRAPHICS_SCRIPT="$ECOS_DRIVER_DIR/graphics.sh"
ECOS_DRIVER_AUDIO_SCRIPT="$ECOS_DRIVER_DIR/audio.sh"
ECOS_DRIVER_META_DIR="$ECOS_WORKING_DIR/driver-meta"

# ECOS UPDATE
ECOS_REMOTE_VERSION_FILE='/tmp/ecos.remote'
ECOS_REMOTE_VERSION=''

# ECOS DEFAULT PROPERTIES
TERMINAL_EXEC='gnome-terminal -e'

# TERMINAL COLORS
TERM_COLOR_RED='\033[0;31m'
TERM_COLOR_GREEN='\033[1;32m'
TERM_COLOR_BLUE='\033[1;34m'
TERM_COLOR_PURPLE='\033[1;35m'
TERM_COLOR_YELLOW='\033[1;33m'
TERM_COLOR_NULL='\033[0m' # No Color

#/////////////////////////////////////////////////////
# MAIN
#/////////////////////////////////////////////////////

main() {

    # ---------------------------------------
    # API
    # ---------------------------------------
    if [ "$1" = "--api" ]; then
        if [ "$2" = "" ]; then
            echo -e "\nUse ECOS API with action:\n\n"
            echo -e "\tzenity <ARGS>"
            echo -e "\tzenity-menu 'item 1' 'item 2' ..."
            exit 1
        fi
        local api_action="$2"
        shift && shift || exit 1
        ecos_api "$api_action" "$@"
        exit 0
    fi

    # ---------------------------------------
    # SHOW VERSION
    # ---------------------------------------
    if [ "$1" = "--version" ]; then
        echo -e "$ECOS_VERSION"
        exit 0
    fi

    # ---------------------------------------
    # SHOW CHANGELOG
    # ---------------------------------------
    if [ "$1" = "--changelog" ]; then
        zenity_show_changelog
        exit 0
    fi

    # ---------------------------------------
    # ECOS INSTALL
    # ---------------------------------------
    if [ "$1" = "--install" ]; then
        tui_install_ecos
    fi

    # ---------------------------------------
    # ECOS UPDATE
    # ---------------------------------------
    if [ "$1" = "--update" ]; then
        update_ecos_system
        exit 0
    fi

    # ---------------------------------------
    # UPDATE NOTIFY
    # ---------------------------------------
    if [ "$1" = "--update-notify" ]; then
        notify_ecos_update
        exit 0
    fi

    # ---------------------------------------
    # ECOS AUTOSTART
    # ---------------------------------------
    if [ "$1" = "--autostart" ]; then
        (sleep 10 && notify_ecos_update >/dev/null) &
        if [ -f "$ECOS_STATE_SHOW_CHANGELOG" ]; then
            zenity_show_changelog
        fi
        exit 0
    fi

    # ---------------------------------------
    # ECOS TWEAKS
    # ---------------------------------------
    if [ "$1" = "--install-tweaks" ]; then
        tui_tweaks_menu '--no-update'
        exit 0
    fi

    # ---------------------------------------
    # EXECUTE TWEAK
    # ---------------------------------------
    if [ "$1" = "--tweak" ]; then
        exec_tweak "$2" "$3"
        exit 0
    fi

    #----------------------------------------
    # OPEN MAIN MENU
    #----------------------------------------
    if [ "$1" = "" ]; then
        zenity_main_menu
        exit $?
    fi
}

ecos_api() {

    local api_action="$1"
    local api_arguments=()

    if [ "$2" != "" ]; then
        shift || exit 1
        api_arguments=("$@")
        # echo "API ARGUMENTS: ${api_arguments[@]}"
        # echo "API ARGUMENT COUNT: ${#api_arguments[@]}"
    fi
    if [ "$api_action" = "notify" ]; then
        api_notify "${api_arguments[@]}"
        exit "$?"
    fi

    if [ "$api_action" = "zenity" ]; then
        api_zenity "${api_arguments[@]}"
        exit "$?"
    fi

    if [ "$api_action" = "zenity-menu" ]; then
        api_zenity_menu "${api_arguments[@]}"
        exit "$?"
    fi

    if [ "$api_action" = "zenity-root" ]; then
        api_zenity_root_password
        exit "$?"
    fi
}

api_notify() {
    notify "$1"
}

api_zenity() {
    zenity "$@"
}

api_zenity_menu() {
    local title="$1"
    shift || exit 1
    zenity --list --hide-header --column="" --text="$(print_zenity_header "$title" $ECOS_VERSION)" --cancel-label='Back' --ok-label='Ok' "$@"
}

api_zenity_root_password() {

    # ROOT PASSWORD
    local root_password=''
    if ! root_password="$(zenity --width=280 --height=120 --entry --hide-text --text='Enter Root Password')"; then
        main
        return 1
    fi

    if [ "$root_password" = "" ]; then
        notify "Root Password was empty"
        api_zenity_root_password
        exit "$?"
    fi
    if ! echo "$root_password" | sudo -S true; then
        notify "Root Password was wrong"
        api_zenity_root_password
        exit "$?"
    else
        notify "Root Access..."
        echo "$root_password"
        root_password=''
        return 0
    fi
}

#/////////////////////////////////////////////////////
# ZENITY
#/////////////////////////////////////////////////////

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=350 --height=280 --title='' --text='' --window-icon="$ECOS_ICON_FILE" "$@" 2>/dev/null
}

notify() {
    zenity --notification --text="$SCRIPT_TITLE\n$1"
}

print_zenity_header() {
    local title="$1"
    local version_remote="$2"
    local header='<span font_family="monospace" foreground="#494949" font="18"><b>'$SCRIPT_TITLE' Manager</b></span>'
    local version_txt='<span font_family="monospace" foreground="#494949" font="10"><b>Version: </b></span>'
    local version='<span font_family="monospace" foreground="#729a4f" font="11">'$ECOS_VERSION'</span>'
    if [ "$version_remote" != "" ] && [ "$ECOS_VERSION" != "$version_remote" ]; then
        local version='<span font_family="monospace" foreground="#db7844" font="10"><b>'$ECOS_VERSION'</b></span><span font_family="monospace" foreground="#494949" font="10"><b> ➤ </b></span><span font_family="monospace" foreground="#A3BE8C" font="10"><b>'$version_remote'</b></span>'
    fi
    local title='<span font_family="monospace" foreground="#494949" font="10"><b>'$title'</b></span>'
    echo "\n$header\n$version\n\n$title"
}

#/////////////////////////////////////////////////////
# ZENITY MENUS
#/////////////////////////////////////////////////////

zenity_main_menu() {
    check_zenity

    local pid_file="/tmp/ecos.pids"
    if [ "$ECOS_REMOTE_VERSION" = '' ]; then
        (
            if ! init_ecos && update_ecos_repo; then
                echo "CANCELED" >"$pid_file"
            else
                echo "SUCCESS" >"$pid_file"
            fi
        ) &
        local task_pid="$!"

        # Capture pid and show progress dialog
        echo "$task_pid" >"$pid_file"
        local txt_title='<span font_family="monospace" foreground="#494949" font="12"><b>Initialize '$SCRIPT_TITLE' CORE...</b></span>'
        tail -f /dev/null --pid $task_pid | (zenity --progress --width=300 --height=150 --no-cancel --text="\n\t$txt_title\n" --pulsate --auto-close || (kill_pid "$task_pid" && echo "CANCELED" >"$pid_file"))

        # Finish
        local pid_state=$(<"$pid_file")

        if [ "$pid_state" = "CANCELED" ]; then
            echo "INIT FAILED"
            return 1
        fi

        if [ "$pid_state" = "SUCCESS" ]; then
            ECOS_REMOTE_VERSION="$($ECOS_REMOTE_VERSION_FILE --version)"
        fi
    fi

    local menu_items=()
    menu_items+=("Update")
    menu_items+=("Dotfiles")
    menu_items+=("Tweaks")
    menu_items+=("Driver")
    menu_items+=("Settings")
    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header 'Menu' $ECOS_REMOTE_VERSION)" --cancel-label='Exit' --ok-label='Ok' "${menu_items[@]}")"; then
        exit 0
    fi

    if [ "$zenity_result" = "Update" ]; then
        zenity_update_progress
        exit 0
    fi
    if [ "$zenity_result" = "Dotfiles" ]; then
        zenity_dotfiles_menu
        zenity_main_menu
        exit 0
    fi
    if [ "$zenity_result" = "Tweaks" ]; then
        ${TERMINAL_EXEC} 'bash -c "'$SCRIPT_FILE' --install-tweaks"'
        exit 0
    fi
    if [ "$zenity_result" = "Driver" ]; then
        zenity_driver_menu
        exit 0
    fi
    if [ "$zenity_result" = "Settings" ]; then
        zenity_settings
        zenity_main_menu
        exit 0
    fi
}

zenity_dotfiles_menu() {
    local menu_items=()
    menu_items+=("Edit Init Script")
    menu_items+=("Reset Dotfiles")
    menu_items+=("Clone Dotfiles Repo")
    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header 'Dotfiles' $ECOS_REMOTE_VERSION)" --cancel-label='Back' --ok-label='Ok' "${menu_items[@]}")"; then
        return 0
    fi

    if [ "$zenity_result" = "Edit Init Script" ]; then
        if zenity_result=$(zenity --text-info --width=1200 --height=600 --title="Init Script" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$ECOS_INIT_SCRIPT"); then
            echo "$zenity_result" >"$ECOS_INIT_SCRIPT"
            notify "Init Script saved"
        fi
        zenity_dotfiles_menu
        return 0
    fi
    if [ "$zenity_result" = "Reset Dotfiles" ]; then
        notify "In Development..."
        zenity_dotfiles_menu
        # TODO
        return 0
    fi
    if [ "$zenity_result" = "Clone Dotfiles Repo" ]; then
        notify "In Development..."
        zenity_dotfiles_menu
        # TODO
        return 0
    fi
}

zenity_settings() {
    check_zenity
    mkdir -p "$ECOS_CONFIG_DIR"
    touch "$ECOS_CONFIG_FILE"
    if zenity_result=$(zenity --text-info --width=720 --height=380 --title="Settings" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$ECOS_CONFIG_FILE"); then
        echo "$zenity_result" >"$ECOS_CONFIG_FILE"
        notify "Settings saved"
    fi

}

zenity_driver_menu() {

    check_git
    check_paru

    local menu_items=()
    menu_items+=("Audio Driver")
    menu_items+=("Graphics Driver")
    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header 'Dotfiles' $ECOS_REMOTE_VERSION)" --cancel-label='Back' --ok-label='Ok' "${menu_items[@]}")"; then
        zenity_main_menu
        return 0
    fi

    if [ "$zenity_result" = "Audio Driver" ]; then
        bash -c "$ECOS_DRIVER_AUDIO_SCRIPT" && wait
        zenity_main_menu
        return 0
    fi

    if [ "$zenity_result" = "Graphics Driver" ]; then
        bash -c "$ECOS_DRIVER_GRAPHICS_SCRIPT" && wait
        zenity_main_menu
        return 0
    fi
}

zenity_show_changelog() {

    # Remove state
    rm -f "$ECOS_STATE_SHOW_CHANGELOG"

    if ! zenity --text-info --width=500 --height=500 --title="$SCRIPT_TITLE" --cancel-label="Close" --ok-label="Update ECOS System" --font="monospace" --html --no-interaction --filename="$ECOS_CHANGELOG_FILE"; then
        echo "Update skipped..."
        exit 1
    fi

    # UPDATE
    zenity_update_progress
}

#/////////////////////////////////////////////////////
# CHECK ECOS DEPENDENCIES
#/////////////////////////////////////////////////////

check_git() {
    if ! pacman -Qi git >/dev/null; then
        sudo pacman --noconfirm --needed -Syy git
    fi

    if [ ! -f "$HOME/.config/git/config" ]; then
        mkdir -p "$HOME/.config/git"
        {
            echo "[user]"
            echo "    email = ${USER}@$(cat /etc/hostname)"
            echo "    name = ${USER}"
            echo "[credential]"
            echo "    helper = /usr/lib/git-core/git-credential-libsecret"
            echo "[pull]"
            echo "    rebase = false"
        } >"$HOME/.config/git/config"
    fi
}

check_paru() {
    if ! pacman -Qi paru >/dev/null; then
        echo "Installing AUR Helper Paru (may take a while)..."

        # Prepare
        local paru_build_tmp="$HOME/Downloads/paru"
        rm -rf "$paru_build_tmp"
        mkdir -p "$paru_build_tmp"

        # Clone
        check_git
        git clone "https://aur.archlinux.org/paru-bin.git" "$paru_build_tmp"
        cd "$paru_build_tmp" || exit 1

        # Install aur helper
        makepkg -si --noconfirm --needed

        # Symlink to yay
        sudo ln -sf /usr/bin/paru /usr/bin/yay

        # Config
        sudo sed -i 's/^#BottomUp/BottomUp/g' /etc/paru.conf
        sudo sed -i 's/^#SudoLoop/SudoLoop/g' /etc/paru.conf

        # Remove download dir
        cd "$HOME" || exit 1
        rm -rf "$paru_build_tmp"
    fi
}

check_zenity() {
    if ! pacman -Qi zenity >/dev/null; then
        sudo pacman --noconfirm --needed -Syy zenity
    fi
}

#/////////////////////////////////////////////////////
# INIT ECOS
#/////////////////////////////////////////////////////

init_ecos() {

    # CHECK INTERNET
    # curl -Is "http://www.google.com" | head -1 | grep 200 >/dev/null
    if ! ping archlinux.de -c 1 >/dev/null 2>&1; then
        tui_init 0 "Error: No Internet Connection!"
        whiptail --msgbox "$(cat "$SCRIPT_TUI_FILE")" 0 "$SCRIPT_TUI_WIDTH"
        exit 1
    fi

    # CREATE DIRS
    mkdir -p "$ECOS_HOME"
    mkdir -p "$ECOS_BIN_DIR"
    mkdir -p "$ECOS_CONFIG_DIR"
    mkdir -p "$ECOS_TWEAKS_USER_DIR"
    mkdir -p "$ECOS_WORKING_DIR"
    mkdir -p "$ECOS_STATE_DIR"
    mkdir -p "$HOME/.local/share/applications"

    # DEFAULT CONFIG PROPERTIES
    check_config_key "$ECOS_CONFIG_FILE" "TERMINAL_EXEC" "$TERMINAL_EXEC"

    # SOURCE ECOS CONFIG
    . "$ECOS_CONFIG_FILE"

    # CHECK DEPENDENCIES
    check_git
    check_paru
    check_zenity

    # SET REMOTE ECOS VERSION
    if [ "$ECOS_REMOTE_VERSION" = '' ]; then
        local ecos_update="$ECOS_REMOTE_VERSION_FILE"

        if ! curl -s -L "$SCRIPT_FILE_URL" >"$ECOS_REMOTE_VERSION_FILE"; then
            echo "ERROR: DOWNLOAD ECOS: $SCRIPT_FILE_URL"
            return 1
        fi
        if ! chmod +x "$ECOS_REMOTE_VERSION_FILE"; then
            echo "ERROR: CHMOD ECOS: $ECOS_REMOTE_VERSION_FILE"
            return 1
        fi

        ECOS_REMOTE_VERSION="$($ECOS_REMOTE_VERSION_FILE --version)"
        echo "ECOS LOCAL VERSION:   $ECOS_VERSION"
        echo "ECOS REMOTE VERSION:  $ECOS_REMOTE_VERSION"
    fi
}

#/////////////////////////////////////////////////////
# INSTALL ECOS
#/////////////////////////////////////////////////////

tui_install_ecos() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 24 "ECOS INSTALLER"
    if ! menu_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 2 "1" "Install ECOS" "2" "    Exit" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Install ECOS
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then

        tui_init 0 "Dotfiles URL"
        if ! ECOS_DOTS_GNOME_URL=$(whiptail --inputbox "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" "$ECOS_DOTS_GNOME_URL" 3>&1 1>&2 2>&3); then
            tui_install_ecos
            exit 0
        fi
        if [ "$ECOS_DOTS_GNOME_URL" = "" ]; then
            tui_init 0 "Dotfiles URL was empty!"
            whiptail --textbox "$SCRIPT_TUI_FILE" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"
            tui_install_ecos
            exit 0
        fi

        # Exec install
        exec_install_ecos "$ECOS_DOTS_GNOME_URL"
        exit 0
    fi

    #----------------------------------------
    # Exit
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        clear
        echo -e "\nSimply type 'ecos' to open again\n\nInstall your System manually..."
        exit 0
    fi

}

exec_install_ecos() {

    local dotfiles_url="$1"

    clear
    print_header

    cd "$HOME" || exit 1

    print_title 'INIT ECOS'
    init_ecos
    echo ">>> OK"

    print_title "INSTALL ECOS REPO"
    update_ecos_repo
    echo -e ">> DONE"

    # Removing existing init
    print_title "REMOVE EXISTING DOTFILES"
    if [ ! -f "$ECOS_INIT_SCRIPT" ]; then
        echo -e ">> $ECOS_INIT_SCRIPT NOT FOUND"
    else
        "$ECOS_INIT_SCRIPT" --remove
        echo -e ">> DONE"
    fi

    # Clone dotfiles
    print_title "CLONE DOTFILES"
    rm -rf "$ECOS_DOTFILES_DIR"
    mkdir -p "$ECOS_DOTFILES_DIR"
    cd "$HOME" || exit 1

    /usr/bin/git clone --bare "$dotfiles_url" "$ECOS_DOTFILES_DIR"

    # Reset dotfiles
    /usr/bin/git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" fetch --all
    /usr/bin/git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" reset --hard HEAD
    /usr/bin/git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" config --local status.showUntrackedFiles no
    echo -e ">> DONE"

    print_title "INIT DOTFILES"
    if [ ! -f "$ECOS_INIT_SCRIPT" ]; then
        echo "ERROR: $ECOS_INIT_SCRIPT not found"
        exit 1
    fi
    echo -e ">> DONE"

    # Create dots bin
    print_title "CREATE DOTS BIN"
    local dots_bin="$ECOS_BIN_DIR/dots"
    mkdir -p "$ECOS_BIN_DIR"
    echo '#!/bin/sh' >"$dots_bin"
    echo 'git --git-dir="'$ECOS_DOTFILES_DIR'" --work-tree="$HOME" "$@"' >>"$dots_bin"
    chmod +x "$dots_bin"
    echo -e ">> DONE"

    # Silent Boot
    print_title "ENABLE SILENT BOOT"
    echo '# Disable the last login message on startup with this file' >"$HOME/.hushlogin"
    echo -e ">> DONE"

    # Create Desktop file
    print_title 'CREATE ECOS DESKTOP FILE'
    create_desktop_file
    echo -e ">> DONE"

    # Create ECOS bin link
    print_title 'CREATE ECOS BIN LINK'
    create_bin_link
    echo ">>> OK"

    # Create Autostart file
    print_title 'ENABLE ECOS AUTOSTART'
    create_autostart_file
    echo -e ">> DONE"

    # Call init script
    print_title 'INIT DOTFILES SCRIPT'
    echo -e "EXECUTE $ECOS_INIT_SCRIPT"
    chmod +x "$ECOS_INIT_SCRIPT" || exit 1
    "$ECOS_INIT_SCRIPT" --init "$ECOS_STATE_INITIALIZED_FILE"
    echo "$($ECOS_INIT_SCRIPT --version)" >"$ECOS_STATE_LATEST_INIT"
    echo -e ">> DONE"

    # Remove zlogin file from core
    print_title 'CLEAN UP'
    rm -f "$HOME/.zlogin"
    echo -e ">> DONE"

    # Create initialized state file
    print_title 'ECOS STATE'
    wait && echo "$ECOS_VERSION" >"$ECOS_STATE_INITIALIZED_FILE"
    echo -e ">> DONE"

    tui_init 0 "ECOS Installation finished"
    tui_add 0 "Reboot now?"
    if (whiptail --yesno "$(cat "$SCRIPT_TUI_FILE")" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH"); then
        reboot
    fi

    exit 0
}

create_bin_link() {
    ln -s -f "$ECOS_BIN" "$ECOS_BIN_LINK"
    chmod +x "$ECOS_BIN_LINK"
}

create_desktop_file() {
    mkdir -p "$HOME/.local/share/applications/"
    {
        echo "[Desktop Entry]"
        echo "Name=ECOS"
        echo "Icon="$ECOS_ICON_FILE""
        echo 'Exec=bash -c "$HOME/.ecos/repo/ecos"'
        echo "Type=Application"
    } >"$ECOS_DESKTOP_FILE"
    chmod +x "$ECOS_DESKTOP_FILE"

}

create_autostart_file() {
    mkdir -p "$HOME/.config/autostart/"
    {
        echo "[Desktop Entry]"
        echo "Name=ECOS"
        echo "Icon="$ECOS_ICON_FILE""
        echo 'Exec=bash -c "$HOME/.ecos/repo/ecos --autostart"'
        echo "Type=Application"
    } >"$ECOS_AUTOSTART_FILE"
    chmod +x "$ECOS_AUTOSTART_FILE"
}

#/////////////////////////////////////////////////////
# UPDATE ECOS
#/////////////////////////////////////////////////////

zenity_update_progress() {
    local LOG_FILE="/tmp/ecos_log_file"
    local STATE_FILE="/tmp/ecos_state_file"

    ${TERMINAL_EXEC} 'bash -c "'$SCRIPT_FILE' --update"' &
    # Capture pid and show progress dialog
    local task_pid="$!"
    echo "$task_pid" >"$STATE_FILE"
    local txt_title='\t\t\t\t<span font_family="monospace" foreground="#494949" font="12"><b>'$SCRIPT_TITLE'</b></span>'
    tail -f /dev/null --pid $task_pid | (zenity --progress --width=320 --height=180 --cancel-label="Cancel" --text="$txt_title\n\n\t\t\t\t <b>Update</b>\n" --pulsate --auto-close || (kill_pid "$task_pid" && echo "CANCELED" >"$STATE_FILE"))

    # Finish
    local process_state=$(<"$STATE_FILE")

    if [ "$process_state" = "CANCELED" ]; then
        notify "Update canceled"
        return 1
    fi
}

update_ecos_repo() {

    cd "$HOME" || exit 1

    if ! [ -d "$ECOS_REPO_DIR/.git" ]; then
        echo "CLONE ECOS REPO"
        mkdir -p "$ECOS_REPO_DIR"
        /usr/bin/git clone "$ECOS_REPO_URL" "$ECOS_REPO_DIR"
    fi

    cd "$ECOS_REPO_DIR" || exit 1
    /usr/bin/git fetch --all
    /usr/bin/git reset --hard origin/HEAD
    /usr/bin/git clean -d -f
    /usr/bin/git pull

    # Add user tweaks
    if [ -d "$ECOS_TWEAKS_USER_DIR" ]; then

        readarray -d '' user_tweaks_list < <(find "$ECOS_TWEAKS_USER_DIR" -mindepth 1 -maxdepth 1 -type d -print0)

        for i in "${user_tweaks_list[@]}"; do

            local tweak_id="$(basename $i)"
            local tweak_sh="$ECOS_TWEAKS_USER_DIR/$tweak_id/${tweak_id}.sh"

            # Check sh file
            if ! [ -f "$tweak_sh" ]; then
                continue
            fi

            #Copy User tweaks
            cp -r "$ECOS_TWEAKS_USER_DIR/$tweak_id" "$ECOS_REPO_DIR/tweaks/$tweak_id"
        done
    fi
}

update_ecos_system() {

    clear
    print_header

    print_title 'INIT ECOS'
    init_ecos
    echo ">>> OK"

    print_title 'UPDATE ECOS REPO'
    update_ecos_repo
    echo ">>> OK"

    # FETCH PACKAGES
    print_title 'FETCH PACMAN/AUR PACKAGES'
    paru -Syy

    # LIST PACKAGES
    print_title 'FETCH PACMAN/AUR PACKAGES'
    if ! paru -Qu; then
        echo -e ">>> ${TERM_COLOR_GREEN}No Package Updates available${TERM_COLOR_NULL}"
    fi

    print_title 'ECOS SYSTEM UPGRADE'
    read -p "Continue? [y/n]: " user_input
    if [ "$user_input" != "y" ]; then
        echo ">>> Skipped..."
        exit 0
    fi

    # PACKAGE UPGRADE
    print_title 'UPADE PACMAN/AUR PACKAGES'
    paru -Su --noconfirm

    # DOTFILES UPDATE
    print_title 'UPDATE DOTFILES REPO'
    cd "$HOME" || exit 1

    # RESET LOCAL FILES
    git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" fetch --all
    git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" reset --hard HEAD
    git --git-dir="$ECOS_DOTFILES_DIR" --work-tree="$HOME" pull

    # UPDATE INIT FILE
    print_title "INIT DOTFILES SCRIPT"
    if [ -f "$ECOS_INIT_SCRIPT" ]; then

        local current_init_version="$($ECOS_INIT_SCRIPT --version)"

        # Read latest init version
        local latest_init_date=''
        if [ -f "$ECOS_STATE_LATEST_INIT" ]; then
            latest_init_date="$(<$ECOS_STATE_LATEST_INIT)"
        fi

        # If latest init version not exists or new init script version
        if [ "$latest_init_date" = '' ] || [ "$latest_init_date" != "$current_init_version" ]; then

            read -p "Update Dotfiles Script? [y/n]: " user_input
            if [ "$user_input" != "y" ]; then
                echo -e ">>> USER SKIPPED..."
            else
                "$ECOS_INIT_SCRIPT" --init "$ECOS_STATE_INITIALIZED_FILE"
                echo "$($ECOS_INIT_SCRIPT --version)" >"$ECOS_STATE_LATEST_INIT"
                echo ">>> DONE"
            fi
        else
            echo ">>> UP TO DATE. SKIPPED..."
        fi
    fi

    # UPDATE DESKTOP FILE
    print_title 'UPDATE ECOS DESKTOP FILE'
    create_desktop_file
    echo ">>> OK"

    # UPDATE ECOS BIN LINK
    print_title 'UPDATE ECOS BIN LINK'
    create_bin_link
    echo ">>> OK"

    # Create Autostart file
    print_title 'ENABLE ECOS AUTOSTART'
    create_autostart_file
    echo -e ">> DONE"

    # UPDATE TWEAKS
    update_tweaks

    # FINISH
    clear
    print_title "${TERM_COLOR_GREEN} !! ECOS UPDATE FINISHED !! ${TERM_COLOR_NULL}"
    echo ""
    read -p "Press any Key to close..."
    exit 0
}

notify_ecos_update() {

    init_ecos

    if [ "$ECOS_REMOTE_VERSION" != "$ECOS_VERSION" ] && [ "$ECOS_REMOTE_VERSION" != "" ]; then
        notify "New $SCRIPT_TITLE $ECOS_REMOTE_VERSION Update available"
    fi
}

#/////////////////////////////////////////////////////
# TWEAKS
#/////////////////////////////////////////////////////

tui_tweaks_menu() {

    check_git
    check_paru

    local tweaks_array_all=()
    local tweaks_array_enabled=()
    local tweaks_array_disabled=()
    local tweak_dir_list=()

    #----------------------------------------
    # READ TWEAK LIST
    #----------------------------------------
    readarray -d '' tweak_dir_list < <(find "$ECOS_TWEAKS_DIR" -mindepth 1 -maxdepth 1 -type d -print0)

    for i in "${tweak_dir_list[@]}"; do

        local tweak_id="$(basename $i)"
        local tweak_sh="$ECOS_TWEAKS_DIR/$tweak_id/${tweak_id}.sh"
        local tweak_meta="$ECOS_TWEAKS_META_DIR/$tweak_id/${tweak_id}.meta"

        # Check sh file
        if ! [ -f "$tweak_sh" ]; then
            continue
        fi

        # Check if installed
        if [ -f "$tweak_meta" ]; then
            # Add to enabled
            tweaks_array_enabled+=("$tweak_id")
        else
            # Add to disabled
            tweaks_array_disabled+=("$tweak_id")
        fi

        # Add to all
        tweaks_array_all+=("$tweak_id")
    done

    #echo "ALL: ${tweaks_array_all[@]}"
    #echo "ENABLED: ${tweaks_array_enabled[@]}"
    #echo "DISABLED: ${tweaks_array_disabled[@]}"

    #----------------------------------------
    # TUI SELECT TWEAK ACTION
    #----------------------------------------
    tui_init 28 "TWEAKS"
    local tweaks_info="                             ${#tweaks_array_enabled[@]}/${#tweaks_array_all[@]}"
    local tweak_action_input=$(whiptail --menu --notags "$(cat "$SCRIPT_TUI_FILE")\n\n$tweaks_info" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 3 "install" "Install" "update" "Update" "remove" "Remove" 3>&1 1>&2 2>&3)
    if [ "$tweak_action_input" = "" ]; then
        exit 0
    fi

    local selected_tweaks_array=()
    local tweak_status='off'

    if [ "$tweak_action_input" = "install" ]; then
        tweak_status='off'
        selected_tweaks_array=("${tweaks_array_disabled[@]}")
    fi
    if [ "$tweak_action_input" = "update" ]; then
        tweak_status='off'
        selected_tweaks_array=("${tweaks_array_enabled[@]}")
    fi
    if [ "$tweak_action_input" = "remove" ]; then
        tweak_status='off'
        selected_tweaks_array=("${tweaks_array_enabled[@]}")
    fi

    #----------------------------------------
    # CREATE WHIPTAIL ARRAY
    #----------------------------------------
    local whiptail_tweaks_array=()
    for i in "${selected_tweaks_array[@]}"; do
        local tweak_id="$i"
        whiptail_tweaks_array+=("${tweak_id} ${tweak_id} ${tweak_status}")
    done
    # Sort array
    IFS=$'\n' whiptail_tweaks_array_sorted=($(sort <<<"${whiptail_tweaks_array[*]}"))
    unset IFS

    #----------------------------------------
    # TUI TWEAK LIST
    #----------------------------------------
    tui_init 0 ""
    local menu_input=$(whiptail --checklist --notags "$(cat "$SCRIPT_TUI_FILE")\n\n" "$SCRIPT_TUI_HEIGHT" "$SCRIPT_TUI_WIDTH" 10 ${whiptail_tweaks_array_sorted[@]} 3>&1 1>&2 2>&3)
    if [ "$menu_input" = "" ]; then
        tui_tweaks_menu '--no-update'
        exit 0
    fi

    local selected_array=($(echo "$menu_input" | tr -d '"'))
    clear
    echo "SELECTED TWEAKS: ${selected_array[*]}"

    #----------------------------------------
    # EXECUTE TWEAK LIST
    #----------------------------------------
    for i in "${selected_array[@]}"; do
        exec_tweak "$tweak_action_input" "$i"
        wait
    done

    tui_tweaks_menu '--no-update'
}

exec_tweak() {

    local tweak_action="$1"
    local tweak_id="$2"
    local tweak_res_dir="$ECOS_TWEAKS_DIR/$tweak_id"
    local tweak_cache_dir="$ECOS_TWEAKS_META_DIR/$tweak_id"
    local tweak_sh="$tweak_res_dir/${tweak_id}.sh"
    local tweak_meta="$tweak_cache_dir/${tweak_id}.tweak"

    #----------------------------------------
    # Check
    #----------------------------------------
    if [ "$tweak_id" = "" ]; then
        echo -e "Error: Tweak ID is empty.\nExecute with:\n$SCRIPT_FILE --tweak TWEAK_ACTION TWEAK_ID"
        exit 1
    fi

    if [ "$tweak_action" = "" ]; then
        echo -e "Error: TWEAK_ACTION is empty.\nExecute with:\n$SCRIPT_FILE --tweak TWEAK_ACTION TWEAK_ID"
        exit 1
    fi

    #----------------------------------------
    # Execute Tweak
    #----------------------------------------

    local action_title=''
    if [ "$tweak_action" = "install" ]; then action_title='INSTALL'; fi
    if [ "$tweak_action" = "update" ]; then action_title='UPDATE'; fi
    if [ "$tweak_action" = "remove" ]; then action_title='REMOVE'; fi

    if [ "$action_title" = "" ]; then
        echo "Error: TWEAK_ACTION=$tweak_action not supported"
        return 1
    fi

    print_title "$action_title TWEAK: ${TERM_COLOR_GREEN}$tweak_id${TERM_COLOR_NULL}"
    if ! [ -f "$tweak_sh" ]; then
        echo "Error: $tweak_id not exists ($tweak_sh)"
        return 1
    fi

    # Create tweak cache dir
    mkdir -p "$tweak_cache_dir"

    chmod +x "$tweak_sh"
    cd "$tweak_cache_dir" || exit 1

    # Execute tweak
    if ECOS_HOME="$ECOS_HOME" "$tweak_sh" "--$tweak_action" "$tweak_res_dir" "$tweak_cache_dir"; then

        # Install or update on success
        if [ "$tweak_action" = "install" ] || [ "$tweak_action" = "update" ]; then
            echo "$(date "+%Y-%m-%d-%H:%M:%S")" >"$tweak_meta"
        fi

        # Remove on success
        if [ "$tweak_action" = "remove" ]; then
            rm -rf "$tweak_cache_dir"
        fi

        # Finish
        echo -e ">>> Done"
    else
        # Remove dir if error during execution
        rm -rf "$tweak_cache_dir"
        echo -e ">>> Failed"
    fi

}

update_tweaks() {
    local tweak_dir_list=()
    readarray -d '' tweak_dir_list < <(find "$ECOS_TWEAKS_META_DIR" -mindepth 1 -maxdepth 1 -type d -print0)

    # Sort array
    IFS=$'\n' tweak_dir_list_sorted=($(sort <<<"${tweak_dir_list[*]}"))
    unset IFS

    for i in "${tweak_dir_list_sorted[@]}"; do
        local tweak_id="$(basename $i)"
        local tweak_sh="$ECOS_REPO_DIR/$tweak_id/${tweak_id}.sh"
        exec_tweak "update" "$tweak_id"
    done
}

#/////////////////////////////////////////////////////
# HELPER FUNCTIONS
#/////////////////////////////////////////////////////

check_config_key() {
    local config_file="$1"
    local config_key="$2"
    local config_value="$3"
    touch "$config_file"
    if ! grep -qrnw "$config_file" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$config_file"
    fi
}

kill_pid() {
    local pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    local pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done
}

tui_init() {
    rm -f "$SCRIPT_TUI_FILE"
    echo '
             ███████╗ ██████╗ ██████╗ ███████╗
             ██╔════╝██╔════╝██╔═══██╗██╔════╝
             █████╗  ██║     ██║   ██║███████╗
             ██╔══╝  ██║     ██║   ██║╚════██║
             ███████╗╚██████╗╚██████╔╝███████║
             ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝
                                       v.'$ECOS_VERSION'
    ' >"$SCRIPT_TUI_FILE"
    tui_add "$1" "$2"
}

tui_add() {

    echo_whitespaces() {
        #----------------------------------------
        # Echo a string with leading spaces
        #   $1: number of spaces
        #   $2: string
        #----------------------------------------
        local spaces=""
        for i in $(seq 1 "$1"); do
            spaces=" ${spaces}"
        done
        echo -e "$spaces""$2"
    }

    echo -e "$(echo_whitespaces "$1" "$2")\n" >>"$SCRIPT_TUI_FILE"

    sleep 0.1
}

print_header() {
    echo -e "
        ${TERM_COLOR_PURPLE}
        ███████╗ ██████╗ ██████╗ ███████╗
        ██╔════╝██╔════╝██╔═══██╗██╔════╝
        █████╗  ██║     ██║   ██║███████╗
        ██╔══╝  ██║     ██║   ██║╚════██║
        ███████╗╚██████╗╚██████╔╝███████║
        ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝${TERM_COLOR_NULL}
                                  ${TERM_COLOR_GREEN}v.${ECOS_VERSION}${TERM_COLOR_NULL}"
}

print_title() {
    echo -e "\n"
    echo -e "${TERM_COLOR_BLUE}>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${TERM_COLOR_NULL}"
    echo -e "${TERM_COLOR_BLUE}>>>${TERM_COLOR_NULL} ${TERM_COLOR_PURPLE}${1}${TERM_COLOR_NULL}"
    echo -e "${TERM_COLOR_BLUE}>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${TERM_COLOR_NULL}"
}

#/////////////////////////////////////////////////////
# TRAP
#/////////////////////////////////////////////////////

on_trap() {
    rm -f "$SCRIPT_TUI_FILE"
}

# Set trap
trap 'on_trap' 0 1 3 6

#/////////////////////////////////////////////////////
# START
#/////////////////////////////////////////////////////

main "$@"
