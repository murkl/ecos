#!/bin/bash

#/////////////////////////////////////////////////////
# SOURCES
#/////////////////////////////////////////////////////

# https://wiki.archlinux.de/title/Installation_mit_UEFI_und_Verschl%C3%BCsselung
# https://www.timoschindler.de/arch-linux-uefi-boot-mit-grub-und-verschluesseltem-lvm/
# https://wiki.archlinux.de/title/Dm-crypt
# https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system
# https://wiki.archlinux.de/title/GRUB
# https://www.rohlix.eu/post/linux-disk-encryption-with-bios-uefi-using-mbr-gpt-luks-lvm-and-grub/
# https://gist.github.com/mattiaslundberg/8620837
# https://gist.github.com/huntrar/e42aee630bee3295b2c671d098c81268
# https://gist.github.com/myyc/9595b520a4c564bef8143a86582f1ea1

#/////////////////////////////////////////////////////
# VARIABLES
#/////////////////////////////////////////////////////

# SCRIPT VARIABLES
INSTALLER_ID="ecos-installer"
INSTALLER_WORKING_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
INSTALLER_SCRIPT_FILE="$INSTALLER_WORKING_DIR/$(basename "$0")"
INSTALLER_CONFIG_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.conf"
INSTALLER_LOG_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.log"

# DEFAULT PASSWORD
ECOS_DEFAULT_PASSWORD='ecos'

# PROGRES
PROGRESS_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.progress"

# TUI VARIABLES
TUI_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.tui"
TUI_WIDTH=64
TUI_HEIGHT=24

# ECOS URL
ECOS_REPO_URL="https://github.com/murkl/ecos.git"

# TERMINAL COLORS
TERM_COLOR_RED='\033[0;31m'
TERM_COLOR_GREEN='\033[1;32m'
TERM_COLOR_BLUE='\033[1;34m'
TERM_COLOR_PURPLE='\033[1;35m'
TERM_COLOR_YELLOW='\033[1;33m'
TERM_COLOR_NULL='\033[0m' # No Color

# INSTALLER CONFIGURATION
USERNAME=''
HOSTNAME=''
WORKSTATION=''
SWAP_SIZE=''
DISK=''
BOOT_PARTITION=''
ROOT_PARTITION=''
UCODE=''
LOCALE_LANG=''
LOCALE_GEN=('')
TIMEZONE=''
VCONSOLE_KEYMAP=''
VCONSOLE_FONT=''
X11_KEYBOARD_LAYOUT=''
X11_KEYBOARD_VARIANT=''
REFLECTOR_COUNTRY=''
WIPE_OVERRIDE='false'
AUTO_UNMOUNT='true'
CUSTOM_PACKAGES=''

#/////////////////////////////////////////////////////
# INSTALLER LANGUAGES
#/////////////////////////////////////////////////////

set_lang_en_US() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='en_US.UTF-8'
    LOCALE_GEN=('en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='en-latin1-nodeadkeys'
    VCONSOLE_FONT='lat9w-16'
    X11_KEYBOARD_LAYOUT='en'
    X11_KEYBOARD_VARIANT='nodeadkeys'
    REFLECTOR_COUNTRY='Germany'
}

set_lang_de_DE() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='de_DE.UTF-8'
    LOCALE_GEN=('de_DE.UTF-8 UTF-8' 'de_DE ISO-8859-1' 'de_DE@euro ISO-8859-15' 'en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='de-latin1-nodeadkeys'
    VCONSOLE_FONT='lat9w-16'
    X11_KEYBOARD_LAYOUT='de'
    X11_KEYBOARD_VARIANT='nodeadkeys'
    REFLECTOR_COUNTRY='Germany'
}

#/////////////////////////////////////////////////////
# MAIN
#/////////////////////////////////////////////////////

main() {

    #----------------------------------------
    # CHECK UEFI
    #----------------------------------------
    [ ! -d /sys/firmware/efi ] && echo "BIOS not supported" && exit 1

    #----------------------------------------
    # CHROOT INSTALLER
    #----------------------------------------
    if [ "$1" = "--chroot" ]; then
        exec_install_chroot "$2"
        exit $?
    fi

    # ---------------------------------------
    # OPEN INSTALLER MENU
    # ---------------------------------------
    tui_core_installer_menu

}

#/////////////////////////////////////////////////////
# TUI CORE INSTALLER
#/////////////////////////////////////////////////////

tui_core_installer_menu() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 0 ""
    if ! menu_input=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n\n" "$TUI_HEIGHT" "$TUI_WIDTH" 3 "1" "Install ECOS Core" "2" "    Recovery" "3" "      Logs" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Install core
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then
        tui_install_ecos_core
        exit $?
    fi

    #----------------------------------------
    # Recovery
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        tui_open_recovery
        exit 0
    fi

    #----------------------------------------
    # Logs
    #----------------------------------------
    if [ "$menu_input" = "3" ]; then
        tui_show_logs
        tui_core_installer_menu
        exit 0
    fi
}

#/////////////////////////////////////////////////////
# TUI CORE INSTALLER
#/////////////////////////////////////////////////////

tui_install_ecos_core() {

    #----------------------------------------
    # Reset logfile
    #----------------------------------------
    if [ -f "$INSTALLER_LOG_FILE" ]; then
        mv -f "$INSTALLER_LOG_FILE" "$INSTALLER_LOG_FILE"".backup"
    fi

    #----------------------------------------
    # Ask for reset core config
    #----------------------------------------
    if [ -f "$INSTALLER_CONFIG_FILE" ]; then
        tui_init 15 "Continue Setup Configuration?\n"
        if ! (whiptail --yesno "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"); then
            core_log "Reset core configuration"

            # Reset config
            if [ -f "$INSTALLER_CONFIG_FILE" ]; then
                mv -f "$INSTALLER_CONFIG_FILE" "$INSTALLER_CONFIG_FILE"".backup"
            fi

            core_log "Reset successfully!"
        fi
    fi

    #----------------------------------------
    # Check config
    #----------------------------------------
    check_config

    #----------------------------------------
    # Encryption password
    #----------------------------------------
    tui_init 0 "Enter Encryption Password"
    if ! password_encryption=$(whiptail --passwordbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
        tui_core_installer_menu
        exit 0
    fi

    # Confirm password
    tui_init 0 "Confirm Encryption Password"
    if ! password_input_confirm=$(whiptail --passwordbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
        tui_core_installer_menu
        exit 0
    fi

    # Check password
    if [ "$password_encryption" != "$password_input_confirm" ]; then
        tui_init 0 "Password Mismatch! Restart the Installation..."
        whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"
        tui_core_installer_menu
        exit 0
    fi

    #----------------------------------------
    # Confirm and execute install
    #----------------------------------------
    tui_init 0 "Start Installation"
    tui_add 0 "!!! ALL YOUR DATA WILL BE LOST !!!"
    tui_add 0 "Continue?"
    if (! whiptail --yesno "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"); then
        tui_core_installer_menu
        exit 0
    fi

    #----------------------------------------
    # Execute install (will execute chroot)
    #----------------------------------------
    tui_init 0 "Core Installation..."
    exec_install_core "$password_encryption" "$PROGRESS_FILE" | whiptail --gauge "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 0 3>&1 1>&2 2>&3
    wait

    # Finish
    local progress_status=$(<"$PROGRESS_FILE")
    rm -rf "$PROGRESS_FILE"

    if [ "$progress_status" = "PROGRESS_SUCCESS" ]; then

        # Success message
        tui_init 0 "INSTALLATION SUCCESSFULLY FINISHED"
        whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"

        # Logs
        tui_show_logs

        # Reboot
        tui_init 0 "Reboot now?"
        if (whiptail --yesno "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"); then
            reboot
        fi
        exit 0
    fi

    # Error message
    tui_init 0 "ERROR: INSTALLATION FAILED!"
    whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"

    # Logs
    tui_show_logs

    exit 1
}

#/////////////////////////////////////////////////////
# INSTALL CORE
#/////////////////////////////////////////////////////

exec_install_core() {

    local password_encryption="$1"
    local progress_result_file="$2"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"

    core_log "!!! INSTALLATION START !!!"
    [ "$password_encryption" = "" ] && core_log e "ERROR: Encryption Password is missing" && exit 1
    core_log "Encryption Password is set!"

    #----------------------------------------
    # Wipe Disk
    #----------------------------------------
    gauge_tui_update 4 "Wipe $DISK"

    # Destroy GPT and MBR data structures
    exec_command_wrap sgdisk -Z "$DISK"

    # Override complete disk with 0
    if [ "$WIPE_OVERRIDE" = "true" ]; then
        gauge_tui_update 6 "Wipe $DISK and override with zero (this will take a while...)"
        exec_command_wrap dd status=progress if=/dev/zero of="$DISK"
    fi

    #----------------------------------------
    # Partition Disk
    #----------------------------------------
    gauge_tui_update 8 "Partition $DISK"

    # Create new partition table
    exec_command_wrap sgdisk -o "$DISK"

    # Reload partition table
    exec_command_wrap partprobe "$DISK"

    # Create partition /boot efi partition: 512MiB
    exec_command_wrap sgdisk -n 0:0:+512MiB -t 0:ef00 -c 1:boot "$DISK"

    # Create partition / partition: Rest of space
    exec_command_wrap sgdisk -n 0:0:0 -t 0:8300 -c 2:root "$DISK"

    #----------------------------------------
    # Encrypt Disk
    #----------------------------------------
    gauge_tui_update 10 "Encrypt $DISK"

    local crypt_cmd="cryptsetup -c aes-xts-plain -s 512 luksFormat $ROOT_PARTITION"
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then # !! DO NOT USE exec_command_wrap
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    #----------------------------------------
    # Open encrypted Disk
    #----------------------------------------

    crypt_cmd="cryptsetup open $ROOT_PARTITION lvm"
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then # !! DO NOT USE exec_command_wrap
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    #----------------------------------------
    # Create LVM
    #----------------------------------------
    gauge_tui_update 11 "Create LVM ($DISK)"
    exec_command_wrap pvcreate /dev/mapper/lvm
    exec_command_wrap vgcreate main /dev/mapper/lvm
    exec_command_wrap lvcreate -l 100%FREE -n root main

    #----------------------------------------
    # Format /
    #----------------------------------------
    gauge_tui_update 12 "Format $ROOT_PARTITION"
    exec_command_wrap mkfs.ext4 -L root /dev/mapper/main-root

    #----------------------------------------
    # Format /boot
    #----------------------------------------
    gauge_tui_update 13 "Format $BOOT_PARTITION"
    exec_command_wrap mkfs.fat -F 32 -n efi "$BOOT_PARTITION"

    #----------------------------------------
    # Mount /
    #----------------------------------------
    gauge_tui_update 14 "Mount $ROOT_PARTITION"
    exec_command_wrap mount /dev/mapper/main-root /mnt

    #----------------------------------------
    # Mount /boot
    #----------------------------------------
    gauge_tui_update 15 "Mount $BOOT_PARTITION"
    exec_command_wrap mkdir /mnt/boot
    exec_command_wrap mount "$BOOT_PARTITION" /mnt/boot

    #----------------------------------------
    # Reflector
    #----------------------------------------
    gauge_tui_update 16 "Reflector (optimize Pacman)"
    exec_command_wrap pacman --noconfirm --needed -Sy reflector
    [ "$REFLECTOR_COUNTRY" != "" ] && exec_command_wrap reflector --country "$REFLECTOR_COUNTRY" --protocol https --latest 10 --age 12 --sort rate --save /etc/pacman.d/mirrorlist
    [ "$REFLECTOR_COUNTRY" = "" ] && exec_command_wrap reflector --protocol https --latest 10 --age 12 --sort rate --save /etc/pacman.d/mirrorlist
    exec_command_wrap pacman -Sy

    #----------------------------------------
    # Pacstrap base arch packages
    #----------------------------------------
    gauge_tui_update 24 "Pacstrap Installation (this will take a while)..."
    exec_command_wrap pacstrap /mnt base base-devel linux linux-firmware

    #----------------------------------------
    # Generate /etc/fstab
    #----------------------------------------
    gauge_tui_update 52 "Generate /etc/fstab"
    local log_txt="genfstab -U /mnt >>/mnt/etc/fstab"
    # genfstab -Lp /mnt
    if ! genfstab -U /mnt >>/mnt/etc/fstab; then
        core_log "e" "$log_txt"
        exit 1
    else
        core_log "c" "$log_txt"
    fi

    #----------------------------------------
    # Copy ecos installer in chroot env
    #----------------------------------------
    gauge_tui_update 53 "Copy ECOS files"
    exec_command_wrap cp -f "$INSTALLER_SCRIPT_FILE" /mnt/$INSTALLER_ID
    exec_command_wrap cp -f "$INSTALLER_CONFIG_FILE" /mnt/$INSTALLER_ID.conf
    exec_command_wrap chmod +x /mnt/$INSTALLER_ID

    #----------------------------------------
    # Copy Pacman mirrorlist in chroot env
    #----------------------------------------
    gauge_tui_update 54 "Copy Pacman mirrorlist"
    exec_command_wrap cp -f "/etc/pacman.d/mirrorlist" /mnt/etc/pacman.d/mirrorlist

    #----------------------------------------
    # Chroot cleanup
    #----------------------------------------
    chroot_cleanup() {

        # Merge ECOS logs
        wait && cat "/mnt/$INSTALLER_ID.log" >>"$INSTALLER_LOG_FILE"

        # Remove files from new system
        rm -f "/mnt/$INSTALLER_ID"
        rm -f "/mnt/$INSTALLER_ID.conf"
        rm -f "/mnt/$INSTALLER_ID.log"
        rm -f "/mnt/$INSTALLER_ID.tui"
        rm -f "/mnt/$INSTALLER_ID.progress"

        # Unmount
        if [ "$AUTO_UNMOUNT" = "true" ]; then
            swapoff -a
            umount -R /mnt/boot
            umount -R /mnt
        fi
    }

    #----------------------------------------
    # Chroot into new system
    #----------------------------------------
    gauge_tui_update 55 "Enter CHROOT Environement"
    log_txt="arch-chroot /mnt /$INSTALLER_ID --chroot <ENCRYPTION_PASSWORD>"
    if ! arch-chroot /mnt "/$INSTALLER_ID" --chroot "$password_encryption"; then
        # FAILED
        core_log "e" "$log_txt"
        chroot_cleanup
        exit 1
    else
        # SUCCESS
        core_log "c" "$log_txt"
        chroot_cleanup
        gauge_tui_update 100 "Installation finished!"
        core_log "!!! INSTALLATION SUCCESSFULLY FINISHED !!!"
        # SET STATUS SUCCESS
        echo "PROGRESS_SUCCESS" >"$progress_result_file"
        exit 0
    fi
}

#/////////////////////////////////////////////////////
# INSTALL CHROOT
#/////////////////////////////////////////////////////

exec_install_chroot() {

    local password_encryption="$1"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"

    #----------------------------------------
    # Essential packages
    #----------------------------------------
    local gauge_txt="Install Essential Packages (this will take a while)..."

    gauge_tui_update 56 "$gauge_txt"
    exec_command_wrap pacman -Syy

    local ucode_pkg="$UCODE"
    [ "$ucode_pkg" = "disabled" ] && ucode_pkg=""
    exec_command_wrap pacman --noconfirm --needed -S $ucode_pkg efibootmgr dosfstools gptfdisk lvm2 $CUSTOM_PACKAGES

    # Network manager
    gauge_tui_update 60 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S networkmanager

    # Git
    gauge_tui_update 64 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S git

    # Nano
    gauge_tui_update 67 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S nano

    # Default shell
    gauge_tui_update 72 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S zsh

    # TLP DISABLED
    # if [ "$WORKSTATION" = "notebook" ]; then
    #     # Battery safer
    #     exec_command_wrap pacman --noconfirm --needed -S tlp
    # fi

    #----------------------------------------
    # Swap
    #----------------------------------------
    if [ "$SWAP_SIZE" != "0" ] && [ -n "$SWAP_SIZE" ]; then
        gauge_tui_update 75 "Create Swap File"
        exec_command_wrap dd if=/dev/zero of=/swapfile bs=1GiB count="$SWAP_SIZE" status=progress
        exec_command_wrap chmod 600 /swapfile
        exec_command_wrap mkswap /swapfile
        exec_command_wrap swapon /swapfile
        echo "# Swapfile" >>/etc/fstab
        echo "/swapfile none swap defaults 0 0" >>/etc/fstab
    fi

    #----------------------------------------
    # Timezone and localization
    #----------------------------------------
    exec_command_wrap ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
    exec_command_wrap hwclock --systohc

    #----------------------------------------
    # Keymap
    #----------------------------------------
    core_log "Create /etc/vconsole.conf"
    echo "KEYMAP=$VCONSOLE_KEYMAP" >/etc/vconsole.conf
    echo "FONT=$VCONSOLE_FONT" >>/etc/vconsole.conf

    #----------------------------------------
    # Locale
    #----------------------------------------
    core_log "Create /etc/locale.conf"
    echo "LANG=$LOCALE_LANG" >/etc/locale.conf

    #----------------------------------------
    # Set locale.gen
    #----------------------------------------
    for ((i = 0; i < ${#LOCALE_GEN[@]}; i++)); do
        local locale_gen_item="${LOCALE_GEN[$i]}"
        sed -i "s/^#$locale_gen_item/$locale_gen_item/g" "/etc/locale.gen"
    done
    gauge_tui_update 78 "Generate Locale"
    exec_command_wrap locale-gen

    #----------------------------------------
    # Set hostname
    #----------------------------------------
    core_log "Create /etc/hostname"
    echo "$HOSTNAME" >/etc/hostname

    #----------------------------------------
    # Set hosts
    #----------------------------------------
    core_log "Create /etc/hosts"
    {
        echo '127.0.0.1    localhost'
        echo '::1          localhost'
    } >/etc/hosts

    #----------------------------------------
    # Network
    #----------------------------------------
    gauge_tui_update 80 "Configure Network"
    exec_command_wrap systemctl enable NetworkManager

    #----------------------------------------
    # Modify HOOKS
    #----------------------------------------
    core_log "Modify /etc/mkinitcpio.conf"
    sed -i "s/MODULES=()/MODULES=(ext4)/g" /etc/mkinitcpio.conf
    sed -i "s/filesystems keyboard fsck/filesystems fsck/g" /etc/mkinitcpio.conf
    sed -i "s/udev autodetect/systemd keyboard autodetect sd-vconsole/g" /etc/mkinitcpio.conf
    sed -i "s/block filesystems fsck/block keymap sd-encrypt lvm2 filesystems fsck/g" /etc/mkinitcpio.conf

    #----------------------------------------
    # Rebuild initrc
    #----------------------------------------
    gauge_tui_update 82 "Rebuild Initial Ramdisk"
    exec_command_wrap mkinitcpio -P

    #----------------------------------------
    # Bootloader (systemd)
    #----------------------------------------

    #exec_command_wrap bootctl --esp-path=/boot install
    exec_command_wrap bootctl install # systemd-boot will try to locate the ESP at /efi, /boot, and /boot/efi

    # Create bootloader config
    echo 'default ecos.conf' >/boot/loader/loader.conf
    echo 'console-mode auto' >>/boot/loader/loader.conf
    echo 'timeout 0' >>/boot/loader/loader.conf
    echo 'editor  yes' >>/boot/loader/loader.conf

    # Create arch default entry
    echo 'title   ECOS' >/boot/loader/entries/ecos.conf
    echo 'linux   /vmlinuz-linux' >>/boot/loader/entries/ecos.conf
    [ "$UCODE" != "disabled" ] && echo "initrd  /$UCODE.img" >>/boot/loader/entries/ecos.conf
    echo 'initrd  /initramfs-linux.img' >>/boot/loader/entries/ecos.conf
    # If using sd-crypt hook, replace cryptdevice with rd.luks.name
    # cryptdevice=UUID='$(blkid -s UUID -o value $ROOT_PARTITION)':main
    # rd.luks.name=$(blkid -s UUID -o value $ROOT_PARTITION)=main
    echo "options rd.luks.name=$(blkid -s UUID -o value $ROOT_PARTITION)=main root=/dev/mapper/main-root init=/usr/lib/systemd/systemd quiet splash loglevel=3 rd.systemd.show_status=false rd.udev.log_priority=3 vt.global_cursor_default=0 rw" >>/boot/loader/entries/ecos.conf

    # Create arch fallback entry
    echo 'title   ECOS Fallback' >/boot/loader/entries/ecos-fallback.conf
    echo 'linux   /vmlinuz-linux' >>/boot/loader/entries/ecos-fallback.conf
    [ "$UCODE" != "disabled" ] && echo "initrd  /$UCODE.img" >>/boot/loader/entries/ecos-fallback.conf
    echo 'initrd  /initramfs-linux-fallback.img' >>/boot/loader/entries/ecos-fallback.conf
    echo "options rd.luks.name=$(blkid -s UUID -o value $ROOT_PARTITION)=main root=/dev/mapper/main-root init=/usr/lib/systemd/systemd rw" >>/boot/loader/entries/ecos-fallback.conf

    #----------------------------------------
    # Create new user
    #----------------------------------------
    exec_command_wrap useradd -m -G users,wheel,video,audio,games,power,storage,disk -s /bin/zsh "$USERNAME"

    #----------------------------------------
    # Allow users in group wheel to use sudo
    #----------------------------------------
    core_log "Enable sudo in /etc/sudoers"
    #sed -i '/%wheel\sALL=(ALL)\sALL/s/^#\s//g' /etc/sudoers
    sed -i 's^# %wheel ALL=(ALL:ALL) ALL^%wheel ALL=(ALL:ALL) ALL^g' /etc/sudoers

    #----------------------------------------
    # Auto login tty1
    #----------------------------------------
    gauge_tui_update 90 "Enable Automatic Login"
    mkdir -p "/etc/systemd/system/getty@tty1.service.d/"
    {
        echo "[Service]"
        echo "ExecStart="
        echo "ExecStart=-/usr/bin/agetty --skip-login --nonewline --noissue --autologin $USERNAME --noclear %I \$TERM"
    } >"/etc/systemd/system/getty@tty1.service.d/autologin.conf"
    exec_command_wrap systemctl enable getty@tty1

    #----------------------------------------
    # Xorg config
    #----------------------------------------

    # Create dir
    exec_command_wrap mkdir -p /etc/X11/xorg.conf.d/

    #----------------------------------------
    # Keyboard config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/00-keyboard.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "keyboard"'
        echo '    MatchIsKeyboard "yes"'
        echo '    Option "XkbLayout" "'$X11_KEYBOARD_LAYOUT'"'
        echo '    Option "XkbModel" "pc105"'
        echo '    Option "XkbVariant" "'$X11_KEYBOARD_VARIANT'"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/00-keyboard.conf"

    #----------------------------------------
    # Mouse config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/50-mouse.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "mouse"'
        echo '    Driver "libinput"'
        echo '    MatchIsPointer "yes"'
        echo '    Option "AccelProfile" "flat"'
        echo '    Option "AccelSpeed" "0"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/50-mouse.conf"

    #----------------------------------------
    # Touchpad config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/70-touchpad.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "touchpad"'
        echo '    Driver "libinput"'
        echo '    MatchIsTouchpad "on"'
        echo '    Option "ClickMethod" "clickfinger"'
        echo '    Option "Tapping" "off"'
        echo '    Option "NaturalScrolling" "true"'
        echo 'EndSection'

    } >"/etc/X11/xorg.conf.d/70-touchpad.conf"

    gauge_tui_update 90 "Enable Daemons"

    #----------------------------------------
    # SSD fstrim
    #----------------------------------------
    exec_command_wrap systemctl enable "fstrim.timer"

    #----------------------------------------
    # Timesync service
    #----------------------------------------
    exec_command_wrap systemctl enable "systemd-timesyncd.service"

    #----------------------------------------
    # TLP (Notebook)
    #----------------------------------------
    # if [ "$WORKSTATION" = "notebook" ]; then
    #     exec_command_wrap systemctl enable "tlp.service"
    # fi

    #----------------------------------------
    # Pacman colors & multilib
    #----------------------------------------
    gauge_tui_update 90 "Configure Pacman"
    core_log "Enable pacman multilib & colors"
    sed -i 's/^#Color/Color/g;/#\[multilib\]/,/#Include/ s/^#//g' /etc/pacman.conf
    exec_command_wrap pacman -Syy

    #----------------------------------------
    # ECOS Repo
    #----------------------------------------
    gauge_tui_update 92 "Initialize ECOS"
    core_log "Initialize ECOS in /home/$USERNAME/.ecos/"
    local ecos_system_dir="/home/$USERNAME/.ecos/.system"
    local ecos_repo_dir="$ecos_system_dir/repo"
    exec_command_wrap mkdir -p "$ecos_system_dir"
    exec_command_wrap /usr/bin/git clone "$ECOS_REPO_URL" "$ecos_repo_dir"
    exec_command_wrap chmod +x "$ecos_repo_dir/ecos"
    exec_command_wrap chmod +x "$ecos_repo_dir/installer"

    # Create .zlogin
    core_log "Creating ~/.zlogin"
    local user_profile="/home/$USERNAME/.zlogin"
    echo '#!/bin/sh' >$user_profile
    echo 'export ECOS_HOME="$HOME/.ecos"' >>$user_profile
    echo 'export PATH="$PATH:$ECOS_HOME/.system/repo/"' >>$user_profile
    echo 'export ECOS_CORE="$ECOS_HOME/.system/repo/ecos"' >>$user_profile
    echo '$ECOS_CORE --install' >>$user_profile
    exec_command_wrap chmod +x $user_profile

    #----------------------------------------
    # Deletes unnecessary files
    #----------------------------------------
    core_log "Deletes unnecessary files"
    exec_command_wrap rm -f "/home/$USERNAME/.bash_logout"
    exec_command_wrap rm -f "/home/$USERNAME/.bash_profile"
    exec_command_wrap rm -f "/home/$USERNAME/.bashrc"
    exec_command_wrap rm -f "/home/$USERNAME/.zshrc"

    #----------------------------------------
    # Set correct user permissions
    #----------------------------------------
    core_log "Set correct user permissions"
    exec_command_wrap chown -R "$USERNAME":"$USERNAME" "/home/$USERNAME"

    #----------------------------------------
    # Change passwords
    #----------------------------------------
    gauge_tui_update 98 "Change Passwords (flickering message is ok)"
    core_log "Change passwords"
    sleep 1
    # passwd root < <(echo -e "$password_encryption\n$password_encryption")
    # passwd "$USERNAME" < <(echo -e "$password_encryption\n$password_encryption")
    clear && wait && echo -e "${ECOS_DEFAULT_PASSWORD}\n${ECOS_DEFAULT_PASSWORD}" | (passwd)
    clear && wait && echo -e "${ECOS_DEFAULT_PASSWORD}\n${ECOS_DEFAULT_PASSWORD}" | (passwd "$USERNAME")

    #----------------------------------------
    # Chroot finished
    #----------------------------------------
    core_log "CHROOT successfully finished"
}

#/////////////////////////////////////////////////////
# CHECK CONFIGURATION
#/////////////////////////////////////////////////////

check_config() {

    if [ -f "$INSTALLER_CONFIG_FILE" ]; then
        . "$INSTALLER_CONFIG_FILE"
    fi

    #----------------------------------------
    # Check user
    #----------------------------------------
    if [ "$USERNAME" = "" ]; then
        tui_init 0 "Enter Username"
        if ! USERNAME=$(whiptail --inputbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
            tui_core_installer_menu
            exit 0
        fi
        if [ "$USERNAME" = "" ]; then
            tui_init 0 "Username was empty! Restart the Installation..."
            whiptail --textbox "$TUI_FILE" "$TUI_HEIGHT" "$TUI_WIDTH"
            tui_core_installer_menu
            exit 0
        fi
        replace_property_value "$INSTALLER_CONFIG_FILE" "USERNAME" "$USERNAME"
    fi

    #----------------------------------------
    # Check workstation
    #----------------------------------------
    if [ "$WORKSTATION" = "" ]; then
        tui_init 20 "Choose Workstation"
        if ! WORKSTATION=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 2 "desktop" "Desktop" "notebook" "Notebook" 3>&1 1>&2 2>&3); then
            tui_core_installer_menu
            exit 0
        fi
        replace_property_value "$INSTALLER_CONFIG_FILE" "HOSTNAME" "$USERNAME-$WORKSTATION"
        replace_property_value "$INSTALLER_CONFIG_FILE" "WORKSTATION" "$WORKSTATION"
    fi

    #----------------------------------------
    # Check Language
    #----------------------------------------
    if [ "$LOCALE_LANG" = "" ] || [ ${#LOCALE_GEN[@]} = 0 ] || [ "$TIMEZONE" = "" ] || [ "$VCONSOLE_KEYMAP" = "" ] || [ "$VCONSOLE_FONT" = "" ] || [ "$X11_KEYBOARD_LAYOUT" = "" ] || [ "$X11_KEYBOARD_VARIANT" = "" ]; then

        tui_init 19 "Choose Setup Language"
        if ! lang_result=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 2 "en_US" "English" "de_DE" "German" 3>&1 1>&2 2>&3); then
            tui_core_installer_menu
            exit 0
        fi
        if [ "$lang_result" = "en_US" ]; then
            set_lang_en_US
        fi

        if [ "$lang_result" = "de_DE" ]; then
            set_lang_de_DE
        fi

        replace_property_value "$INSTALLER_CONFIG_FILE" "TIMEZONE" "$TIMEZONE"
        replace_property_value "$INSTALLER_CONFIG_FILE" "LOCALE_LANG" "$LOCALE_LANG"
        replace_property_array_value "$INSTALLER_CONFIG_FILE" "LOCALE_GEN" "${LOCALE_GEN[@]}"
        replace_property_value "$INSTALLER_CONFIG_FILE" "VCONSOLE_KEYMAP" "$VCONSOLE_KEYMAP"
        replace_property_value "$INSTALLER_CONFIG_FILE" "VCONSOLE_FONT" "$VCONSOLE_FONT"
        replace_property_value "$INSTALLER_CONFIG_FILE" "X11_KEYBOARD_LAYOUT" "$X11_KEYBOARD_LAYOUT"
        replace_property_value "$INSTALLER_CONFIG_FILE" "X11_KEYBOARD_VARIANT" "$X11_KEYBOARD_VARIANT"
        replace_property_value "$INSTALLER_CONFIG_FILE" "REFLECTOR_COUNTRY" "$REFLECTOR_COUNTRY"
    fi

    #----------------------------------------
    # Check Microcode
    #----------------------------------------
    if [ "$UCODE" = "" ]; then
        tui_init 17 "Choose Processor Microcode"
        if ! UCODE=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 3 "disabled" "Disable" "intel-ucode" "Intel" "amd-ucode" "AMD" 3>&1 1>&2 2>&3); then
            tui_core_installer_menu
            exit 0
        fi
        replace_property_value "$INSTALLER_CONFIG_FILE" "UCODE" "$UCODE"
    fi

    #----------------------------------------
    # Check disk
    #----------------------------------------
    check_config_disk
    replace_property_value "$INSTALLER_CONFIG_FILE" "DISK" "$DISK"
    replace_property_value "$INSTALLER_CONFIG_FILE" "BOOT_PARTITION" "$BOOT_PARTITION"
    replace_property_value "$INSTALLER_CONFIG_FILE" "ROOT_PARTITION" "$ROOT_PARTITION"

    #----------------------------------------
    # Check Swap
    #----------------------------------------
    if [ "$SWAP_SIZE" = "" ]; then
        local rm_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
        local ram_mb=$(expr $rm_kb / 1024)
        local ram_gb=$(expr $ram_mb / 1024)
        replace_property_value "$INSTALLER_CONFIG_FILE" "SWAP_SIZE" "$ram_gb"
    fi

    #----------------------------------------
    # Add default values
    #----------------------------------------

    check_config_key "$INSTALLER_CONFIG_FILE" "WIPE_OVERRIDE" "$WIPE_OVERRIDE"
    check_config_key "$INSTALLER_CONFIG_FILE" "AUTO_UNMOUNT" "$AUTO_UNMOUNT"
    check_config_key "$INSTALLER_CONFIG_FILE" "CUSTOM_PACKAGES" "$CUSTOM_PACKAGES"

    #----------------------------------------
    # Show default config screen
    #----------------------------------------
    tui_init 0 "$(cat "$INSTALLER_CONFIG_FILE")"
    tui_add 28 "\nEdit Setup Configuration?"
    local line="#############################################################"
    local setup_cfg="$line\nSETUP CONFIGURATION\n$line\n\n$(cat "$INSTALLER_CONFIG_FILE")\n\n$line\n\nEdit Configuration?"
    if (whiptail "$setup_cfg" --yesno 0 0); then
        nano "$INSTALLER_CONFIG_FILE"
        wait
        # Check again after edit
        check_config
    fi

    #----------------------------------------
    # Source changes
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"
}

check_config_disk() {

    if [ "$1" = "--force" ] || [ "$DISK" = "" ] || [ "$ROOT_PARTITION" = "" ]; then

        local disk_array=()
        while read disk_line; do
            local disk_size=$(lsblk -d -n -o SIZE /dev/$disk_line)
            disk_array+=("/dev/$disk_line")
            disk_array+=(" ($disk_size)")
        done < <(lsblk -I 8,259,254 -d -o KNAME -n)

        if [ ${#disk_array[@]} == 0 ]; then
            tui_init 0 "No supported Disk found"
            whiptail --msgbox "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"
            exit 1
        fi

        tui_init 24 "Choose Disk"
        if ! DISK=$(whiptail --menu "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" "${#disk_array[@]}" "${disk_array[@]}" 3>&1 1>&2 2>&3); then
            tui_core_installer_menu
            exit 0
        fi

        [[ "$DISK" = "/dev/nvm"* ]] && BOOT_PARTITION="${DISK}p1" || BOOT_PARTITION="${DISK}1"
        [[ "$DISK" = "/dev/nvm"* ]] && ROOT_PARTITION="${DISK}p2" || ROOT_PARTITION="${DISK}2"

    fi

}

#/////////////////////////////////////////////////////
# RECOVERY
#/////////////////////////////////////////////////////

tui_open_recovery() {

    #----------------------------------------
    # Select Disk
    #----------------------------------------
    check_config_disk --force

    #----------------------------------------
    # Open Crypt
    #----------------------------------------
    clear
    print_info "OPEN CRYPTED DEVICE" "$ROOT_PARTITION"
    echo -e "\nENTER YOUR ENCRYPTION PASSWORD\n"
    cryptsetup open $ROOT_PARTITION lvm

    #----------------------------------------
    # Mount
    #----------------------------------------
    local mnt_recovery='/mnt/recovery'
    print_info "MOUNT TO" "$mnt_recovery"
    mkdir -p "$mnt_recovery"
    mount /dev/mapper/main-root "$mnt_recovery"
    mkdir -p "$mnt_recovery/boot"
    mount "$BOOT_PARTITION" "$mnt_recovery/boot"

    #----------------------------------------
    # Chroot
    #----------------------------------------
    clear
    print_info "CHROOT" "$mnt_recovery"
    echo -e "\n"
    echo -e "!! YOUR ARE NOW ON YOUR RECOVERY SYSTEM !!"
    echo -e "        Leave with command 'exit'         "
    echo -e "\n"
    arch-chroot "$mnt_recovery"
    wait

    #----------------------------------------
    # Unmount
    #----------------------------------------
    swapoff -a
    umount -R "$mnt_recovery"
    wait && clear
}

#/////////////////////////////////////////////////////
# LOGGING
#/////////////////////////////////////////////////////

core_log() {

    touch "$INSTALLER_LOG_FILE"

    # Default vaules
    local lvl="INFO"
    local text="$1"

    # Handle if 2. parameter is set
    if [ "$2" != "" ]; then

        if [ "$1" = "c" ]; then
            lvl="EXEC"
        fi

        if [ "$1" = "e" ]; then
            lvl="FAIL"
        fi

        # Shift to 2. argument to you $* for all instead of $2
        shift
        text="$*"
    fi

    # Style log output
    local styled_text="$(date "+%Y-%m-%d %H:%M:%S") $INSTALLER_ID | $lvl | $text"

    # Print to STOUT & INSTALLER_LOG_FILE
    printf '%s\n' "$styled_text" >>"$INSTALLER_LOG_FILE"
    printf '%s\n' "$styled_text"
}

tui_show_logs() {
    touch "$INSTALLER_LOG_FILE"
    tui_init 0 "$(cat "$INSTALLER_LOG_FILE")"
    #whiptail --textbox $TUI_FILE 0 $TUI_WIDTH
    whiptail --msgbox "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"
}

#/////////////////////////////////////////////////////
# HELPER FUNCTIONS
#/////////////////////////////////////////////////////

exec_command_wrap() {
    # !!! DO NOT USE WITH PIPE (|) OR REDIRECT (>>) !!!

    local command_txt="$*"
    local tmp_error="$INSTALLER_WORKING_DIR/$INSTALLER_ID.error"

    if "$@" >/dev/null 2>"$tmp_error"; then
        core_log "c" "$command_txt"
        rm -f "$tmp_error"
        return 0
    else
        core_log "e" "$command_txt"
        cat "$tmp_error" >>"$INSTALLER_LOG_FILE"
        rm -f "$tmp_error"
        exit 1
    fi
}

gauge_tui_update() {
    local percent="$1"
    local text="$2"
    tui_init 0 "$text"
    echo -e "XXX\n$percent\n$(cat "$TUI_FILE")\nXXX"
}

check_config_key() {
    local config_file="$1"
    local config_key="$2"
    local default_value="$3"
    touch "$config_file"
    if ! grep -qrnw "$config_file" -e "$config_key=*"; then
        echo "$config_key=\"$default_value\"" >>"$config_file"
    fi
}

replace_property_value() {
    local config_file="$1"
    local config_key="$2"
    local config_value="$3"
    check_config_key "$config_file" "$config_key" ""
    sed -i "s;${config_key}=.*;${config_key}=\"${config_value}\";g" "$config_file"
}

replace_property_array_value() {

    local config_file="$1" && shift
    local config_key=$1 && shift
    local config_value_list=("$@")
    local new_value_item_list=""

    for ((i = 0; i < ${#config_value_list[@]}; i++)); do
        local array_item="${config_value_list[$i]}"

        # First item without leading space
        if [ $i = 0 ]; then
            new_value_item_list="\"$array_item\""
            continue
        fi

        # Other items
        new_value_item_list="$new_value_item_list \"$array_item\""
    done

    # Replace items (without "")
    check_config_key "$config_file" "$config_key" ""
    sed -i "s;${config_key}=.*;${config_key}=(${new_value_item_list});g" "$config_file"
}

tui_init() {
    rm -f "$TUI_FILE"
    echo -e '\n
             ███████  ██████  ██████  ███████ 
             ██      ██      ██    ██ ██      
             █████   ██      ██    ██ ███████ 
             ██      ██      ██    ██      ██ 
             ███████  ██████  ██████  ███████\n                   
             ' >"$TUI_FILE"
    tui_add "$1" "$2"
}

tui_add() {

    echo_whitespaces() {
        #----------------------------------------
        # Echo a string with leading spaces
        #   $1: number of spaces
        #   $2: string
        #----------------------------------------
        local spaces=""
        for i in $(seq 1 "$1"); do
            spaces=" ${spaces}"
        done
        echo -e "$spaces""$2"
    }

    echo -e "$(echo_whitespaces "$1" "$2")\n" >>"$TUI_FILE"

    # Wait for file is ready
    sleep 0.1
}

print_info() {
    local title="$1"
    local info="$2"
    local prefix="${TERM_COLOR_BLUE}>>>${TERM_COLOR_NULL}"
    local output="${prefix} ${TERM_COLOR_PURPLE}${title}${TERM_COLOR_NULL}"
    if [ "$info" != "" ]; then
        output="${output}: ${TERM_COLOR_YELLOW}${info}${TERM_COLOR_NULL}"
    fi
    echo -e "\n$output"
}

#/////////////////////////////////////////////////////
# TRAP
#/////////////////////////////////////////////////////

on_trap() {
    rm -f "$TUI_FILE"
    rm -f "$PROGRESS_FILE"
}

# Set trap
trap 'on_trap' 0 1 3 6

#/////////////////////////////////////////////////////
# START
#/////////////////////////////////////////////////////

main "$@"
