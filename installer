#!/bin/bash

#/////////////////////////////////////////////////////
# VARIABLES
#/////////////////////////////////////////////////////

# SCRIPT VARIABLES
INSTALLER_ID="ecos-installer"
INSTALLER_WORKING_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
INSTALLER_SCRIPT_FILE="$INSTALLER_WORKING_DIR/$(basename "$0")"
INSTALLER_CONFIG_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.conf"
INSTALLER_LOG_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.log"

# DEFAULT PASSWORD
ECOS_DEFAULT_PASSWORD='ecos'

# TUI VARIABLES
TUI_FILE="$INSTALLER_WORKING_DIR/$INSTALLER_ID.tui"
TUI_WIDTH=64
TUI_HEIGHT=24

# ECOS URL
ECOS_REPO_URL="https://github.com/murkl/ecos.git"

# ARCH ISO
ECOS_ARCH_ISO_ROOT_URL="https://www.archlinux.de/download/iso/$(date "+%Y.%m.01")"
ECOS_ARCH_ISO_FILE="archlinux-$(date "+%Y.%m.01")-x86_64.iso"
ECOS_ARCH_ISO_SHA1="sha1sums.txt"

# INSTALLER CONFIGURATION
USERNAME=''
HOSTNAME=''
WORKSTATION=''
SWAP_SIZE='0'
DISK=''
BOOT_PARTITION=''
ROOT_PARTITION=''
UCODE=''
LOCALE_LANG=''
LOCALE_GEN=('')
TIMEZONE=''
VCONSOLE_KEYMAP=''
X11_KEYBOARD_LAYOUT=''
X11_KEYBOARD_VARIANT=''
CUSTOM_PACKAGES=''
DUALBOOT=''

#/////////////////////////////////////////////////////
# INSTALLER LANGUAGES
#/////////////////////////////////////////////////////

set_lang_en_US() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='en_US.UTF-8'
    LOCALE_GEN=('en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='en-latin1-nodeadkeys'
    X11_KEYBOARD_LAYOUT='en'
    X11_KEYBOARD_VARIANT='nodeadkeys'
}

set_lang_de_DE() {
    TIMEZONE='Europe/Berlin'
    LOCALE_LANG='de_DE.UTF-8'
    LOCALE_GEN=('de_DE.UTF-8 UTF-8' 'de_DE ISO-8859-1' 'de_DE@euro ISO-8859-15' 'en_US.UTF-8 UTF-8')
    VCONSOLE_KEYMAP='de-latin1-nodeadkeys'
    X11_KEYBOARD_LAYOUT='de'
    X11_KEYBOARD_VARIANT='nodeadkeys'
}

#/////////////////////////////////////////////////////
# MAIN
#/////////////////////////////////////////////////////

main() {

    #----------------------------------------
    # CHROOT INSTALLER
    #----------------------------------------
    if [ "$1" = "--install-chroot" ] && [ "$2" != "" ] && [ "$3" != "" ]; then
        exec_install_chroot "$2" "$3"
        exit $?
    fi

    # ---------------------------------------
    # FORCE: INSTALL ECOS CORE
    # ---------------------------------------
    if [ "$1" = "--install-core" ]; then
        tui_main_menu
        exit $?
    fi

    # ---------------------------------------
    # FORCE: CREATE BOOTABLE USB
    # ---------------------------------------
    if [ "$1" = "--create-usb" ]; then
        tui_create_usb
        exit $?
    fi

    # ---------------------------------------
    # AUTO DETECT
    # ---------------------------------------
    if [ "$1" = "" ]; then
        # Check if started from arch live iso
        if [ -f "/proc/sys/kernel/hostname" ] && [ "$(cat /proc/sys/kernel/hostname)" = "archiso" ]; then
            tui_main_menu
        else
            tui_create_usb
        fi
    fi
}

#/////////////////////////////////////////////////////
# TUI MAIN MENU
#/////////////////////////////////////////////////////

tui_main_menu() {

    #----------------------------------------
    # Show TUI menu
    #----------------------------------------
    tui_init 22 "ECOS INSTALLER"
    if ! menu_input=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n\n" "$TUI_HEIGHT" "$TUI_WIDTH" 3 "1" "Install ECOS Core" "2" "    Recovery" "3" "      Logs" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    #----------------------------------------
    # Install core
    #----------------------------------------
    if [ "$menu_input" = "1" ]; then
        check_internet
        tui_core_installer
        exit $?
    fi

    #----------------------------------------
    # Recovery
    #----------------------------------------
    if [ "$menu_input" = "2" ]; then
        tui_open_recovery
        exit 0
    fi

    #----------------------------------------
    # Logs
    #----------------------------------------
    if [ "$menu_input" = "3" ]; then
        tui_show_logs
        tui_main_menu
        exit 0
    fi
}

#/////////////////////////////////////////////////////
# TUI CORE INSTALLER
#/////////////////////////////////////////////////////

tui_core_installer() {

    #----------------------------------------
    # Ask for reset core config
    #----------------------------------------
    if [ -f "$INSTALLER_CONFIG_FILE" ]; then
        tui_init 15 "Continue Setup Configuration?\n"
        if ! (whiptail --yesno "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"); then
            core_log "Reset core configuration"

            # Reset config
            if [ -f "$INSTALLER_CONFIG_FILE" ]; then
                mv -f "$INSTALLER_CONFIG_FILE" "$INSTALLER_CONFIG_FILE"".backup"
            fi

            # Reset logs
            if [ -f "$INSTALLER_LOG_FILE" ]; then
                mv -f "$INSTALLER_LOG_FILE" "$INSTALLER_LOG_FILE"".backup"
            fi

            # Unmount
            swapoff -a
            umount -R /mnt
            cryptsetup close cryptroot

            core_log "Reset finished!"
        fi
    fi

    #----------------------------------------
    # Check config
    #----------------------------------------
    check_config

    #----------------------------------------
    # Encryption password
    #----------------------------------------
    tui_init 0 "Enter Encryption Password"
    if ! password_encryption=$(whiptail --passwordbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    # Confirm password
    tui_init 0 "Confirm Encryption Password"
    if ! password_input_confirm=$(whiptail --passwordbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    # Check password
    if [ "$password_encryption" != "$password_input_confirm" ]; then
        tui_init 0 "Password Mismatch! Restart the Installation..."
        whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"
        exit 1
    fi

    #----------------------------------------
    # Confirm and execute install
    #----------------------------------------
    tui_init 0 "Start Installation"
    tui_add 0 "!!! ALL YOUR DATA WILL BE LOST !!!"
    tui_add 0 "Continue?"
    if (! whiptail --yesno "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"); then
        exit 0
    fi

    #----------------------------------------
    # Execute install (will execute chroot)
    #----------------------------------------
    tui_init 0 "Core Installation..."
    exec_install_core "$password_encryption" | whiptail --gauge "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 0 3>&1 1>&2 2>&3

    # Show Result
    if [ $? = 1 ]; then
        # Error message
        tui_init 0 "ERROR: INSTALLATION FAILED!"
        whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"

        # Logs
        tui_show_logs

        exit 1
    else
        # Success message
        tui_init 0 "INSTALLATION SUCCESSFULLY FINISHED"
        whiptail --msgbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"

        # Logs
        tui_show_logs

        # Reboot
        tui_init 0 "Reboot now?"
        if (whiptail --yesno "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH"); then
            reboot
        fi

        exit 0
    fi
}

#/////////////////////////////////////////////////////
# INSTALL CORE
#/////////////////////////////////////////////////////

exec_install_core() {

    local password_encryption="$1"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"

    core_log "!!! INSTALLATION START !!!"

    #----------------------------------------
    # Check UEFI boot
    #----------------------------------------
    local uefi_mode=true
    if efivar -l >/dev/null; then
        core_log "UEFI detected"
    else
        core_log "BIOS detected"
        uefi_mode=false
    fi

    #----------------------------------------
    # Wipe disk
    #----------------------------------------
    gauge_tui_update 4 "Wipe $DISK"
    exec_command_wrap sgdisk -Z "$DISK"

    #----------------------------------------
    # Partition disk
    #----------------------------------------
    gauge_tui_update 8 "Partition $DISK"

    # Create new partition table
    exec_command_wrap sgdisk -o "$DISK"

    # Reload partition table
    exec_command_wrap partprobe "$DISK"

    if [ "$uefi_mode" = "true" ]; then

        # /boot partition: 512MiB
        exec_command_wrap sgdisk -n 0:0:+512MiB -t 0:ef00 -c 0:boot "$DISK"

        # / partition: Rest of space
        exec_command_wrap sgdisk -n 0:0:0 -t 0:8300 -c 1:root "$DISK"

    else

        # BIOS only: 1MiB partition is needed for GRUB (if GPT is used instead of MBR)
        exec_command_wrap sgdisk -n 0:0:+1MiB -t 0:ef02 "$DISK"

        # / partition: Rest of space
        exec_command_wrap sgdisk -n 0:0:0 -t 0:8300 -c 0:root "$DISK"
    fi

    #----------------------------------------
    # Encrypt disk
    #----------------------------------------
    gauge_tui_update 10 "Encrypt $DISK"

    # Set encrypt command
    local crypt_cmd=''
    if [ "$uefi_mode" = "true" ]; then
        crypt_cmd="cryptsetup -c aes-xts-plain -s 512 luksFormat $ROOT_PARTITION"
    else
        # LUKS2 isnt implemented yet (GRUB)
        crypt_cmd="cryptsetup -c aes-xts-plain -s 512 luksFormat --type luks1 $ROOT_PARTITION"
    fi

    # Create encryption
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    # Open encrypt
    crypt_cmd="cryptsetup open $ROOT_PARTITION cryptroot"
    if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
        core_log "e" "$crypt_cmd"
        exit 1
    else
        core_log "c" "$crypt_cmd"
    fi

    #----------------------------------------
    # Format disk
    #----------------------------------------
    gauge_tui_update 12 "Format $DISK"

    # Format /boot
    if [ "$uefi_mode" = "true" ]; then
        exec_command_wrap mkfs.fat -F32 "$BOOT_PARTITION"
    fi

    # Format crypted /
    exec_command_wrap mkfs.ext4 /dev/mapper/cryptroot

    #----------------------------------------
    # Mount disk to /mnt
    #----------------------------------------
    exec_command_wrap mount /dev/mapper/cryptroot /mnt

    if [ "$uefi_mode" = "true" ]; then
        exec_command_wrap mkdir /mnt/boot
        exec_command_wrap mount "$BOOT_PARTITION" /mnt/boot
    fi

    #----------------------------------------
    # Pacstrap base arch packages
    #----------------------------------------
    gauge_tui_update 24 "Pacstrap Installation (may take a while)..."
    exec_command_wrap pacstrap /mnt base base-devel linux linux-firmware

    #----------------------------------------
    # Generate /etc/fstab
    #----------------------------------------
    gauge_tui_update 52 "Generate /etc/fstab"
    local log_txt="genfstab -U /mnt >>/mnt/etc/fstab"
    if ! genfstab -U /mnt >>/mnt/etc/fstab; then
        core_log "e" "$log_txt"
        exit 1
    else
        core_log "c" "$log_txt"
    fi

    #----------------------------------------
    # Copy ecos in chroot env
    #----------------------------------------
    exec_command_wrap cp -f "$INSTALLER_SCRIPT_FILE" /mnt/$INSTALLER_ID
    exec_command_wrap cp -f "$INSTALLER_CONFIG_FILE" /mnt/$INSTALLER_ID.conf
    exec_command_wrap chmod +x /mnt/$INSTALLER_ID

    #----------------------------------------
    # Chroot into new system
    #----------------------------------------
    gauge_tui_update 54 "Enter CHROOT Environement"
    log_txt="arch-chroot /mnt /$INSTALLER_ID --install-chroot $uefi_mode <ENCRYPTION_PASSWORD>"
    if ! arch-chroot /mnt "/$INSTALLER_ID" --install-chroot "$uefi_mode" "$password_encryption"; then
        core_log "e" "$log_txt"
        exit 1
    else
        core_log "c" "$log_txt"
    fi

    #----------------------------------------
    # Merge ecos logs
    #----------------------------------------
    cat "/mnt/$INSTALLER_ID.log" >>"$INSTALLER_LOG_FILE"
    cp "/mnt/$INSTALLER_ID.error" "$INSTALLER_WORKING_DIR/$INSTALLER_ID.error"
    rm -f "/mnt/$INSTALLER_ID"
    rm -f "/mnt/$INSTALLER_ID.conf"
    rm -f "/mnt/$INSTALLER_ID.log"
    rm -f "/mnt/$INSTALLER_ID.tui"

    #----------------------------------------
    # Unmount
    #----------------------------------------
    exec_command_wrap swapoff -a
    exec_command_wrap umount -R /mnt
    exec_command_wrap cryptsetup close cryptroot

    #----------------------------------------
    # Finished
    #----------------------------------------
    gauge_tui_update 100 "Installation finished!"
    core_log "!!! INSTALLATION SUCCESSFULLY FINISHED !!!"

    exit 0
}

#/////////////////////////////////////////////////////
# INSTALL CHROOT
#/////////////////////////////////////////////////////

exec_install_chroot() {

    local uefi_mode="$1"
    local password_encryption="$2"

    #----------------------------------------
    # Source config
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"

    #----------------------------------------
    # Essential packages
    #----------------------------------------
    local gauge_txt="Install Essential Packages (may take a while)..."

    gauge_tui_update 56 "$gauge_txt"
    exec_command_wrap pacman -Syy

    # Boootloader, Microcode Kernel Updates for CPU & Core Tools
    gauge_tui_update 58 "$gauge_txt"
    bootloader_pkgs="efibootmgr"
    if [ "$uefi_mode" = "false" ]; then
        bootloader_pkgs="grub"
    fi
    exec_command_wrap pacman --noconfirm --needed -S $UCODE $bootloader_pkgs dosfstools gptfdisk $CUSTOM_PACKAGES

    # Network manager
    gauge_tui_update 60 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S networkmanager

    # Git
    gauge_tui_update 64 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S git

    # Default shell
    gauge_tui_update 70 "$gauge_txt"
    exec_command_wrap pacman --noconfirm --needed -S zsh

    if [ "$WORKSTATION" = "notebook" ]; then
        # Battery safer
        exec_command_wrap pacman --noconfirm --needed -S tlp
    fi

    #----------------------------------------
    # Swap
    #----------------------------------------
    if [ "$SWAP_SIZE" != "0" ] && [ -n "$SWAP_SIZE" ]; then
        gauge_tui_update 75 "Create Swap File"
        exec_command_wrap dd if=/dev/zero of=/swapfile bs=1GiB count="$SWAP_SIZE" status=progress
        exec_command_wrap chmod 600 /swapfile
        exec_command_wrap mkswap /swapfile
        exec_command_wrap swapon /swapfile
        echo "# Swapfile" >>/etc/fstab
        echo "/swapfile none swap defaults 0 0" >>/etc/fstab
    fi

    #----------------------------------------
    # Timezone and localization
    #----------------------------------------
    exec_command_wrap ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
    exec_command_wrap hwclock --systohc

    #----------------------------------------
    # Keymap
    #----------------------------------------
    core_log "Create /etc/vconsole.conf"
    echo "KEYMAP=$VCONSOLE_KEYMAP" >/etc/vconsole.conf
    echo "FONT=lat9w-16" >>/etc/vconsole.conf

    #----------------------------------------
    # Locale
    #----------------------------------------
    core_log "Create /etc/locale.conf"
    echo "LANG=$LOCALE_LANG" >/etc/locale.conf

    #----------------------------------------
    # Set locale.gen
    #----------------------------------------
    for locale_gen_item in "${LOCALE_GEN[@]}"; do
        sed -i "s/^#$locale_gen_item/$locale_gen_item/g" "/etc/locale.gen"
    done

    gauge_tui_update 78 "Generate Locale"
    exec_command_wrap locale-gen

    #----------------------------------------
    # Set hostname
    #----------------------------------------
    core_log "Create /etc/hostname"
    echo "$HOSTNAME" >/etc/hostname

    #----------------------------------------
    # Set hosts
    #----------------------------------------
    core_log "Create /etc/hosts"
    {
        echo '127.0.0.1    localhost'
        echo '::1          localhost'
    } >/etc/hosts

    #----------------------------------------
    # Network
    #----------------------------------------
    gauge_tui_update 80 "Configure Network"
    exec_command_wrap systemctl enable NetworkManager

    #----------------------------------------
    # Boot loader
    #----------------------------------------
    gauge_tui_update 82 "Install Bootloader"

    if [ "$uefi_mode" = true ]; then
        #----------------------------------------
        # Bootloader: systemd-boot
        #----------------------------------------

        exec_command_wrap bootctl --path=/boot install

        echo 'default arch.conf' >/boot/loader/loader.conf
        echo 'timeout 0' >>/boot/loader/loader.conf
        echo 'editor  yes' >>/boot/loader/loader.conf

        echo 'title   Arch Linux' >/boot/loader/entries/arch.conf
        echo 'linux   /vmlinuz-linux' >>/boot/loader/entries/arch.conf
        [ -n "$UCODE" ] && echo "initrd  /$UCODE.img" >>/boot/loader/entries/arch.conf
        echo 'initrd  /initramfs-linux.img' >>/boot/loader/entries/arch.conf
        echo "options cryptdevice=$ROOT_PARTITION:cryptroot root=/dev/mapper/cryptroot quiet splash loglevel=3 rd.systemd.show_status=false rd.udev.log_priority=3 vt.global_cursor_default=0 rw" >>/boot/loader/entries/arch.conf
    else
        #----------------------------------------
        # Bootloader: GRUB (for legacy BIOS)
        #----------------------------------------

        # Create a keyfile to prevent enter the encryption password twice
        local crypt_key="/crypto_keyfile.bin"

        exec_command_wrap dd bs=512 count=4 if=/dev/random of="$crypt_key" iflag=fullblock
        exec_command_wrap chmod 600 "$crypt_key"

        # When initramfs' permissions are set to 644 (by default), then all users will be able to dump the keyfile
        exec_command_wrap chmod 600 /boot/initramfs-linux*

        local crypt_cmd="cryptsetup luksAddKey $ROOT_PARTITION $crypt_key"
        if ! echo -n "$password_encryption" | $crypt_cmd -d - >/dev/null; then
            core_log "e" "$crypt_cmd"
            exit 1
        else
            core_log "c" "$crypt_cmd"
        fi

        sed -i 's^FILES=()^FILES=('$crypt_key')^g' /etc/mkinitcpio.conf
        exec_command_wrap mkinitcpio -P

        # Mdify before execute grub-install!
        echo 'GRUB_ENABLE_CRYPTODISK=y' >/etc/default/grub
        echo 'GRUB_CMDLINE_LINUX="cryptdevice='$ROOT_PARTITION':cryptroot cryptkey=rootfs:'$crypt_key'"' >>/etc/default/grub

        exec_command_wrap grub-install --no-floppy "$DISK"
        exec_command_wrap grub-mkconfig -o /boot/grub/grub.cfg
    fi

    #----------------------------------------
    # Modify HOOKS
    #----------------------------------------
    core_log "Modify /etc/mkinitcpio.conf"
    cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.bak
    sed -i "s/filesystems keyboard fsck/filesystems fsck/g" /etc/mkinitcpio.conf
    sed -i "s/udev autodetect/udev keyboard autodetect/g" /etc/mkinitcpio.conf
    sed -i "s/block filesystems/block keymap encrypt filesystems/g" /etc/mkinitcpio.conf

    #----------------------------------------
    # Rebuild initrc
    #----------------------------------------
    gauge_tui_update 85 "Rebuild Initial Ramdisk"
    exec_command_wrap mkinitcpio -P

    #----------------------------------------
    # Create new user
    #----------------------------------------
    exec_command_wrap useradd -m -G users,wheel,video,audio,storage,disk -s /bin/zsh "$USERNAME"

    #----------------------------------------
    # Allow users in group wheel to use sudo
    #----------------------------------------
    core_log "Enable sudo in /etc/sudoers"
    sed -i '/%wheel\sALL=(ALL)\sALL/s/^#\s//g' /etc/sudoers

    #----------------------------------------
    # Auto login tty1
    #----------------------------------------
    gauge_tui_update 90 "Enable Automatic Login"
    mkdir -p "/etc/systemd/system/getty@tty1.service.d/"
    {
        echo "[Service]"
        echo "ExecStart="
        echo "ExecStart=-/usr/bin/agetty --skip-login --nonewline --noissue --autologin $USERNAME --noclear %I \$TERM"
    } >"/etc/systemd/system/getty@tty1.service.d/override.conf"
    exec_command_wrap systemctl enable getty@tty1

    #----------------------------------------
    # Xorg config
    #----------------------------------------

    # Create dir
    exec_command_wrap mkdir -p /etc/X11/xorg.conf.d/

    #----------------------------------------
    # Keyboard config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/00-keyboard.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "keyboard"'
        echo '    MatchIsKeyboard "yes"'
        echo '    Option "XkbLayout" "'$X11_KEYBOARD_LAYOUT'"'
        echo '    Option "XkbModel" "pc105"'
        echo '    Option "XkbVariant" "'$X11_KEYBOARD_VARIANT'"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/00-keyboard.conf"

    #----------------------------------------
    # Mouse config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/50-mouse.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "mouse"'
        echo '    Driver "libinput"'
        echo '    MatchIsPointer "yes"'
        echo '    Option "AccelProfile" "flat"'
        echo '    Option "AccelSpeed" "0"'
        echo 'EndSection'
    } >"/etc/X11/xorg.conf.d/50-mouse.conf"

    #----------------------------------------
    # Touchpad config
    #----------------------------------------
    core_log "Create /etc/X11/xorg.conf.d/70-touchpad.conf"
    {
        echo 'Section "InputClass"'
        echo '    Identifier "touchpad"'
        echo '    Driver "libinput"'
        echo '    MatchIsTouchpad "on"'
        echo '    Option "ClickMethod" "clickfinger"'
        echo '    Option "Tapping" "off"'
        echo '    Option "NaturalScrolling" "true"'
        echo 'EndSection'

    } >"/etc/X11/xorg.conf.d/70-touchpad.conf"

    gauge_tui_update 92 "Enable Daemons"

    #----------------------------------------
    # SSD fstrim
    #----------------------------------------
    exec_command_wrap systemctl enable "fstrim.timer"

    #----------------------------------------
    # Timesync service
    #----------------------------------------
    exec_command_wrap systemctl enable "systemd-timesyncd.service"

    #----------------------------------------
    # TODO (FAILED): Network browsing service
    #----------------------------------------
    #exec_command_wrap systemctl enable "avahi-daemon"

    #----------------------------------------
    # TLP (Notebook)
    #----------------------------------------
    if [ "$WORKSTATION" = "notebook" ]; then
        exec_command_wrap systemctl enable "tlp.service"
    fi

    #----------------------------------------
    # Pacman colors & multilib
    #----------------------------------------
    gauge_tui_update 95 "Configure Pacman"
    core_log "Enable pacman multilib & colors"
    sed -i 's/^#Color/Color/g;/#\[multilib\]/,/#Include/ s/^#//g' /etc/pacman.conf
    exec_command_wrap pacman -Syy

    #----------------------------------------
    # ECOS Repo
    #----------------------------------------
    # TODO
    gauge_tui_update 98 "ECOS Repo"

    # Copy ecos to local bin
    mkdir -p "/home/$USERNAME/.ecos/bin"
    cp "$INSTALLER_SCRIPT_FILE" "/home/$USERNAME/.ecos/bin/ecos"
    chmod +x "/home/$USERNAME/.ecos/bin/ecos"

    # Create .zlogin
    local user_profile="/home/$USERNAME/.zlogin"
    echo '#!/bin/sh' >$user_profile
    echo 'export ECOS_HOME="$HOME/.ecos"' >>$user_profile
    echo 'export ECOS_CORE="$ECOS_HOME/bin/ecos"' >>$user_profile
    echo 'export PATH="$PATH:$ECOS_HOME/bin"' >>$user_profile
    echo '$ECOS_CORE --ecos-install' >>$user_profile
    chmod +x $user_profile

    #----------------------------------------
    # Deletes unnecessary files
    #----------------------------------------
    rm -f "/home/$USERNAME/.bash_logout"
    rm -f "/home/$USERNAME/.bash_profile"
    rm -f "/home/$USERNAME/.bashrc"
    rm -f "/home/$USERNAME/.zshrc"

    #----------------------------------------
    # Set correct user permissions
    #----------------------------------------
    chown -R "$USERNAME":"$USERNAME" "/home/$USERNAME"

    #----------------------------------------
    # Change passwords
    #----------------------------------------
    core_log "Change passwords"
    #passwd root < <(echo -e "$password_encryption\n$password_encryption")
    #passwd "$USERNAME" < <(echo -e "$password_encryption\n$password_encryption")
    echo -e "${ECOS_DEFAULT_PASSWORD}\n${ECOS_DEFAULT_PASSWORD}" | (passwd)
    echo -e "${ECOS_DEFAULT_PASSWORD}\n${ECOS_DEFAULT_PASSWORD}" | (passwd "$USERNAME")

    #----------------------------------------
    # Chroot finished
    #----------------------------------------
    core_log "CHROOT successfully finished"
}

#/////////////////////////////////////////////////////
# CHECK CONFIGURATION
#/////////////////////////////////////////////////////

check_config() {

    if [ -f "$INSTALLER_CONFIG_FILE" ]; then
        . "$INSTALLER_CONFIG_FILE"
    fi

    #----------------------------------------
    # Check user
    #----------------------------------------
    if [ "$USERNAME" = "" ]; then
        tui_init 0 "Enter Username"
        if ! USERNAME=$(whiptail --inputbox "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$USERNAME" = "" ]; then
            tui_init 0 "Username was empty! Restart the Installation..."
            whiptail --textbox "$TUI_FILE" "$TUI_HEIGHT" "$TUI_WIDTH"
            exit 0
        fi
        replace_config_value "$INSTALLER_CONFIG_FILE" "USERNAME" "$USERNAME"
    fi

    #----------------------------------------
    # Check workstation
    #----------------------------------------
    if [ "$WORKSTATION" = "" ]; then
        tui_init 20 "Choose Workstation"
        if ! WORKSTATION=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 2 "desktop" "Desktop" "notebook" "Notebook" 3>&1 1>&2 2>&3); then
            exit 0
        fi

        replace_config_value "$INSTALLER_CONFIG_FILE" "HOSTNAME" "$USERNAME-$WORKSTATION"
        replace_config_value "$INSTALLER_CONFIG_FILE" "WORKSTATION" "$WORKSTATION"
    fi

    #----------------------------------------
    # Check Dualboot
    #----------------------------------------
    if [ "$DUALBOOT" = "" ]; then
        tui_init 25 "Dualboot"
        if ! DUALBOOT=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 2 "default" "Default" "windows10" "Windows 10" 3>&1 1>&2 2>&3); then
            exit 0
        fi

        replace_config_value "$INSTALLER_CONFIG_FILE" "DUALBOOT" "$DUALBOOT"
    fi

    #----------------------------------------
    # Check Language
    #----------------------------------------
    if [ "$LOCALE_LANG" = "" ] || [ ${#LOCALE_GEN[@]} = 0 ] || [ "$TIMEZONE" = "" ] || [ "$VCONSOLE_KEYMAP" = "" ] || [ "$X11_KEYBOARD_LAYOUT" = "" ] || [ "$X11_KEYBOARD_VARIANT" = "" ]; then

        tui_init 19 "Choose Setup Language"
        if ! lang_result=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 2 "en_US" "English" "de_DE" "German" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$lang_result" = "en_US" ]; then
            set_lang_en_US
        fi

        if [ "$lang_result" = "de_DE" ]; then
            set_lang_de_DE
        fi

        replace_config_value "$INSTALLER_CONFIG_FILE" "TIMEZONE" "$TIMEZONE"
        replace_config_value "$INSTALLER_CONFIG_FILE" "LOCALE_LANG" "$LOCALE_LANG"
        check_config_key_array "$INSTALLER_CONFIG_FILE" "LOCALE_GEN" "${LOCALE_GEN[@]}"
        replace_config_value "$INSTALLER_CONFIG_FILE" "VCONSOLE_KEYMAP" "$VCONSOLE_KEYMAP"
        replace_config_value "$INSTALLER_CONFIG_FILE" "X11_KEYBOARD_LAYOUT" "$X11_KEYBOARD_LAYOUT"
        replace_config_value "$INSTALLER_CONFIG_FILE" "X11_KEYBOARD_VARIANT" "$X11_KEYBOARD_VARIANT"
    fi

    #----------------------------------------
    # Check Microcode
    #----------------------------------------
    if [ "$UCODE" = "" ]; then

        tui_init 17 "Choose Processor Microcode"
        if ! UCODE=$(whiptail --menu --notags "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" 3 "none" "Disable" "intel-ucode" "Intel" "amd-ucode" "AMD" 3>&1 1>&2 2>&3); then
            exit 0
        fi
        if [ "$UCODE" = 'none' ]; then
            UCODE=''
        fi

        replace_config_value "$INSTALLER_CONFIG_FILE" "UCODE" "$UCODE"
    fi

    #----------------------------------------
    # Check disk
    #----------------------------------------
    check_config_disk
    replace_config_value "$INSTALLER_CONFIG_FILE" "DISK" "$DISK"
    replace_config_value "$INSTALLER_CONFIG_FILE" "BOOT_PARTITION" "$BOOT_PARTITION"
    replace_config_value "$INSTALLER_CONFIG_FILE" "ROOT_PARTITION" "$ROOT_PARTITION"

    #----------------------------------------
    # Add default values
    #----------------------------------------
    check_config_key "$INSTALLER_CONFIG_FILE" "SWAP_SIZE" "$SWAP_SIZE"
    check_config_key "$INSTALLER_CONFIG_FILE" "CUSTOM_PACKAGES" "$CUSTOM_PACKAGES"

    #----------------------------------------
    # Show default config screen
    #----------------------------------------
    tui_init 0 "$(cat "$INSTALLER_CONFIG_FILE")"
    tui_add 28 "\nEdit Setup Configuration?"
    if (whiptail --yesno "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"); then
        nano "$INSTALLER_CONFIG_FILE"
        wait
        # Check again after edit
        check_config
    fi

    #----------------------------------------
    # Source changes
    #----------------------------------------
    . "$INSTALLER_CONFIG_FILE"
}

check_config_disk() {

    if [ "$1" = "--force" ] || [ "$DISK" = "" ] || [ "$BOOT_PARTITION" = "" ] || [ "$ROOT_PARTITION" = "" ]; then

        local disk_array=()
        while read disk_line; do
            disk_size=$(lsblk -d -n -o SIZE /dev/$disk_line)
            disk_array+=("/dev/$disk_line")
            disk_array+=(" ($disk_size)")
        done < <(lsblk -I 8,259 -d -o KNAME -n)

        tui_init 24 "Choose Disk"
        if ! DISK=$(whiptail --menu "$(cat "$TUI_FILE")" "$TUI_HEIGHT" "$TUI_WIDTH" "${#disk_array[@]}" "${disk_array[@]}" 3>&1 1>&2 2>&3); then
            exit 0
        fi

        BOOT_PARTITION="${DISK}1"
        ROOT_PARTITION="${DISK}2"

        # NVM Express
        if [[ "$DISK" = "/dev/nvm"* ]]; then
            BOOT_PARTITION="${DISK}p1"
            ROOT_PARTITION="${DISK}p2"
        fi
    fi
}

#/////////////////////////////////////////////////////
# RECOVERY
#/////////////////////////////////////////////////////

tui_open_recovery() {

    #----------------------------------------
    # Select Disk
    #----------------------------------------
    check_config_disk --force

    #----------------------------------------
    # Open Crypt
    #----------------------------------------
    clear
    print_title "OPEN CRYPTED: $ROOT_PARTITION"
    echo -e "\nENTER YOUR ENCRYPTION PASSWORD\n"
    cryptsetup open $ROOT_PARTITION cryptroot

    #----------------------------------------
    # Mount
    #----------------------------------------
    local mnt_recovery='/mnt/recovery'
    print_title "MOUNT TO $mnt_recovery"
    mkdir -p "$mnt_recovery"
    mount /dev/mapper/cryptroot "$mnt_recovery"
    mkdir -p "$mnt_recovery/boot"
    mount -p "$BOOT_PARTITION" "$mnt_recovery/boot"

    #----------------------------------------
    # Chroot
    #----------------------------------------
    clear
    print_title "ECOS RECOVERY"

    # Mount /boot in recovery system
    if ! arch-chroot "$mnt_recovery" mount $BOOT_PARTITION /boot; then
        echo "CHROOT Mount /boot"
        exit 1
    fi
    echo -e "\n"
    echo -e "!! YOUR ARE NOW ON YOUR RECOVERY SYSTEM !!"
    echo -e "        Leave with command 'exit'         "
    echo -e "\n"
    arch-chroot "$mnt_recovery"
    wait

    #----------------------------------------
    # Unmount
    #----------------------------------------
    clear
    print_title "UNMOUNT"
    swapoff -a
    umount -R "$mnt_recovery"
    cryptsetup close cryptroot
}

#/////////////////////////////////////////////////////
# CREATE BOOTABLE USB STICK
#/////////////////////////////////////////////////////

tui_create_usb() {

    if ! [ -x "$(command -v whiptail)" ]; then
        echo "ERROR: whiptail not installed"
        exit 1
    fi

    if ! [ -x "$(command -v curl)" ]; then
        echo "ERROR: curl not installed"
        exit 1
    fi

    if ! [ -x "$(command -v dd)" ]; then
        echo "ERROR: dd not installed"
        exit 1
    fi

    # Select Disk
    #--------------------------------------------
    local disk_array=()
    while read disk_line; do
        disk_size=$(lsblk -d -n -o SIZE /dev/$disk_line)
        disk_array+=("/dev/$disk_line")
        disk_array+=(" ($disk_size)")
    done < <(lsblk -I 8 -d -o KNAME -n)

    local usb_disk=''
    tui_init 17 "CREATE BOOTABLE USB STICK"
    tui_add 20 "Choose Target Device"
    if ! usb_disk=$(whiptail --menu "$(cat "$TUI_FILE")\n" "$TUI_HEIGHT" "$TUI_WIDTH" "${#disk_array[@]}" "${disk_array[@]}" 3>&1 1>&2 2>&3); then
        exit 0
    fi

    local local_iso_dir="/tmp/arch-iso"
    local iso_url="$ECOS_ARCH_ISO_ROOT_URL/$ECOS_ARCH_ISO_FILE"
    local sha1_url="$ECOS_ARCH_ISO_ROOT_URL/$ECOS_ARCH_ISO_SHA1"
    local local_iso_file="$local_iso_dir/$ECOS_ARCH_ISO_FILE"
    local local_sha1_file="$local_iso_dir/$ECOS_ARCH_ISO_FILE.sha1"

    mkdir -p "$local_iso_dir"

    # Check and download arch iso
    #--------------------------------------------
    print_title "USB Disk: $usb_disk"

    # Downloading ISO
    if ! [ -f "$local_iso_file" ]; then
        print_title "Downloading ISO: $iso_url"
        if ! curl -L "$iso_url" -o "$local_iso_file.part"; then
            echo "ERROR: Downloading ISO $iso_url"
            exit 1
        fi
        wait
        if ! mv "$local_iso_file.part" "$local_iso_file"; then
            echo "ERROR: Moving ISO $local_iso_file"
            exit 1
        fi
    fi

    # Downloading SHA1 Sum
    if ! [ -f "$local_sha1_file" ]; then
        print_title "Downloading SHA1: $sha1_url"
        if ! curl -L "$sha1_url" -o "$local_sha1_file.part"; then
            echo "ERROR: Downloading SHA1 Sum $sha1_url"
            exit 1
        fi
        wait
        if ! mv "$local_sha1_file.part" "$local_sha1_file"; then
            echo "ERROR: Moving SHA1 Sum $local_sha1_file"
            exit 1
        fi
    fi

    # Check SHA1 Sum
    cd "$local_iso_dir" || exit 1
    if grep -qrnw "$local_sha1_file" -e "$(sha1sum "$ECOS_ARCH_ISO_FILE")"; then
        print_title "SHA1 Checksum correct"
    else
        print_title "ERROR: SHA1 Checksum incorrect"
        exit 1
    fi

    print_title "Arch ISO: $local_iso_file"

    # Create Bootable USB Stick
    #--------------------------------------------
    print_title "Create Bootable USB Stick"

    if ! sudo dd bs=4M if="$local_iso_file" of="$usb_disk" status=progress oflag=sync; then
        echo "ERROR: Creating USB Stick"
        exit 1
    fi

    # Finished
    wait && print_title "FINISHED! Please remove the USB Stick $usb_disk"
}

#/////////////////////////////////////////////////////
# LOGGING
#/////////////////////////////////////////////////////

core_log() {

    touch "$INSTALLER_LOG_FILE"

    # Default vaules
    local lvl="INFO"
    local text="$1"

    # Handle if 2. parameter is set
    if [ "$2" != "" ]; then

        if [ "$1" = "c" ]; then
            lvl="EXEC"
        fi

        if [ "$1" = "e" ]; then
            lvl="FAIL"
        fi

        # Shift to 2. argument to you $* for all instead of $2
        shift
        text="$*"
    fi

    # Style log output
    local styled_text="$(date "+%Y-%m-%d %H:%M:%S") $INSTALLER_ID | $lvl | $text"

    # Print to STOUT & INSTALLER_LOG_FILE
    printf '%s\n' "$styled_text" >>"$INSTALLER_LOG_FILE"
    printf '%s\n' "$styled_text"
}

tui_show_logs() {
    touch "$INSTALLER_LOG_FILE"
    tui_init 0 "$(cat "$INSTALLER_LOG_FILE")"
    #whiptail --textbox $TUI_FILE 0 $TUI_WIDTH
    whiptail --msgbox "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"
}

#/////////////////////////////////////////////////////
# HELPER FUNCTIONS
#/////////////////////////////////////////////////////

exec_command_wrap() {
    # !!! DO NOT USE WITH PIPE (|) OR REDIRECT (>>) !!!

    local command_txt="$*"
    local tmp_error="$INSTALLER_WORKING_DIR/$INSTALLER_ID.error"

    if "$@" >/dev/null 2>"$tmp_error"; then
        core_log "c" "$command_txt"
        rm -f "$tmp_error"
        return 0
    else
        core_log "e" "$command_txt"
        cat "$tmp_error" >>"$INSTALLER_LOG_FILE"
        cat "/mnt/$INSTALLER_ID.log" >>"$INSTALLER_LOG_FILE"
        rm -f "$tmp_error"
        exit 1
    fi
}

gauge_tui_update() {
    local percent="$1"
    local text="$2"
    tui_init 0 "$text"
    echo -e "XXX\n$percent\n$(cat "$TUI_FILE")\nXXX"
}

check_config_key() {
    local config_file="$1"
    local config_key="$2"
    local config_value="$3"
    touch "$config_file"
    if ! grep -qrnw "$config_file" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$config_file"
    fi
}

replace_config_value() {
    local config_file="$1"
    local key="$2"
    local value="$3"
    check_config_key "$config_file" "$key" "$value"
    sed -i "s#$key=.*#$key=\"$value\"#g" "$config_file"
}

check_config_key_array() {
    local config_file="$1" && shift
    local key=$1 && shift
    local value=("$@")

    local items_txt='( '
    for item in "${value[@]}"; do
        items_txt="$items_txt'$item' "
    done
    items_txt="$items_txt"')'

    check_config_key "$config_file" "$key" ""
    sed -i "s#$key=.*#$key=$items_txt#g" "$config_file"
}

tui_init() {
    rm -f "$TUI_FILE"
    echo '
             ███████╗ ██████╗ ██████╗ ███████╗
             ██╔════╝██╔════╝██╔═══██╗██╔════╝
             █████╗  ██║     ██║   ██║███████╗
             ██╔══╝  ██║     ██║   ██║╚════██║
             ███████╗╚██████╗╚██████╔╝███████║
             ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝
    ' >"$TUI_FILE"
    tui_add "$1" "$2"
}

tui_add() {

    echo_whitespaces() {
        #----------------------------------------
        # Echo a string with leading spaces
        #   $1: number of spaces
        #   $2: string
        #----------------------------------------
        local spaces=""
        for i in $(seq 1 "$1"); do
            spaces=" ${spaces}"
        done
        echo -e "$spaces""$2"
    }

    echo -e "$(echo_whitespaces "$1" "$2")\n" >>"$TUI_FILE"

    # Wait for file is ready
    sleep 0.1
}

print_title() {

    COLOR_RED='\033[0;31m'
    COLOR_GREEN='\033[1;32m'
    COLOR_BLUE='\033[1;34m'
    COLOR_PURPLE='\033[1;35m'
    COLOR_YELLOW='\033[1;33m'
    COLOR_NULL='\033[0m' # No Color

    echo -e "\n"
    echo -e "${COLOR_BLUE}>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${COLOR_NULL}"
    echo -e "${COLOR_BLUE}>>>${COLOR_NULL} ${COLOR_PURPLE}${1}${COLOR_NULL}"
    echo -e "${COLOR_BLUE}>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${COLOR_NULL}"
}

check_internet() {
    # curl -Is "http://www.google.com" | head -1 | grep 200 >/dev/null
    if ! ping archlinux.de -c 1 >/dev/null 2>&1; then
        tui_init 0 "Error: No Internet Connection!"
        whiptail --msgbox "$(cat "$TUI_FILE")" 0 "$TUI_WIDTH"
        exit 1
    fi
}

#/////////////////////////////////////////////////////
# TRAP
#/////////////////////////////////////////////////////

on_trap() {
    rm -f "$TUI_FILE"
}

# Set trap
trap 'on_trap' 0 1 3 6

#/////////////////////////////////////////////////////
# START
#/////////////////////////////////////////////////////

main "$@"
